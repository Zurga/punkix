(()=>{var Ot=Object.defineProperty;var Li=e=>Ot(e,"__esModule",{value:!0});var Ui=(e,t)=>{Li(e);for(var i in t)Ot(e,i,{get:t[i],enumerable:!0})};"use strict";(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(n,o){o=o||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(n,o.bubbles,o.cancelable,o.detail),a}return s.prototype=window.Event.prototype,s}function i(s,n){var o=document.createElement("input");return o.type="hidden",o.name=s,o.value=n,o}function r(s,n){var o=s.getAttribute("data-to"),a=i("_method",s.getAttribute("data-method")),l=i("_csrf_token",s.getAttribute("data-csrf")),h=document.createElement("form"),c=document.createElement("input"),p=s.getAttribute("target");h.method=s.getAttribute("data-method")==="get"?"get":"post",h.action=o,h.style.display="none",p?h.target=p:n&&(h.target="_blank"),h.appendChild(l),h.appendChild(a),document.body.appendChild(h),c.type="submit",h.appendChild(c),c.click()}window.addEventListener("click",function(s){var n=s.target;if(!s.defaultPrevented)for(;n&&n.getAttribute;){var o=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!n.dispatchEvent(o))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(n.getAttribute("data-method"))return r(n,s.metaKey||s.shiftKey),s.preventDefault(),!1;n=n.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var n=s.target.getAttribute("data-confirm");n&&!window.confirm(n)&&s.preventDefault()},!1)})();var be=e=>typeof e=="function"?e:function(){return e},Oi=typeof self!="undefined"?self:null,ye=typeof window!="undefined"?window:null,ce=Oi||ye||ce,Mi="2.0.0",V={connecting:0,open:1,closing:2,closed:3},Hi=1e4,Fi=1e3,M={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},q={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},ht={longpoll:"longpoll",websocket:"websocket"},Ni={complete:4},Me=class{constructor(e,t,i,r){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=r,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(r=>r.status===e).forEach(r=>r.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},Mt=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Bi=class{constructor(e,t,i){this.state=M.closed,this.topic=e,this.params=be(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Me(this,q.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new Mt(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=M.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(r=>r.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=M.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=M.closed,this.socket.remove(this)}),this.onError(r=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,r),this.isJoining()&&this.joinPush.reset(),this.state=M.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Me(this,q.leave,be({}),this.timeout).send(),this.state=M.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(q.reply,(r,s)=>{this.trigger(this.replyEventName(s),r)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(q.close,e)}onError(e){return this.on(q.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t=="undefined"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let r=new Me(this,e,function(){return t},i);return this.canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=M.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(q.close,"leave")},i=new Me(this,q.leave,be({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,r){return this.topic!==e?!1:r&&r!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:r}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=M.joining,this.joinPush.resend(e))}trigger(e,t,i,r){let s=this.onMessage(e,t,i,r);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let n=this.bindings.filter(o=>o.event===e);for(let o=0;o<n.length;o++)n[o].callback(s,i,r||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===M.closed}isErrored(){return this.state===M.errored}isJoined(){return this.state===M.joined}isJoining(){return this.state===M.joining}isLeaving(){return this.state===M.leaving}},He=class{static request(e,t,i,r,s,n,o){if(ce.XDomainRequest){let a=new ce.XDomainRequest;return this.xdomainRequest(a,e,t,r,s,n,o)}else{let a=new ce.XMLHttpRequest;return this.xhrRequest(a,e,t,i,r,s,n,o)}}static xdomainRequest(e,t,i,r,s,n,o){return e.timeout=s,e.open(t,i),e.onload=()=>{let a=this.parseJSON(e.responseText);o&&o(a)},n&&(e.ontimeout=n),e.onprogress=()=>{},e.send(r),e}static xhrRequest(e,t,i,r,s,n,o,a){return e.open(t,i,!0),e.timeout=n,e.setRequestHeader("Content-Type",r),e.onerror=()=>a&&a(null),e.onreadystatechange=()=>{if(e.readyState===Ni.complete&&a){let l=this.parseJSON(e.responseText);a(l)}},o&&(e.ontimeout=o),e.send(s),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var r in e){if(!Object.prototype.hasOwnProperty.call(e,r))continue;let s=t?`${t}[${r}]`:r,n=e[r];typeof n=="object"?i.push(this.serialize(n,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(n))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},$i=e=>{let t="",i=new Uint8Array(e),r=i.byteLength;for(let s=0;s<r;s++)t+=String.fromCharCode(i[s]);return btoa(t)},xe=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=V.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+ht.websocket),"$1/"+ht.longpoll)}endpointURL(){return He.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=V.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===V.open||this.readyState===V.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:r}=e;this.token=i}else t=0;switch(t){case 200:r.forEach(s=>{setTimeout(()=>this.onmessage({data:s}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=V.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){typeof e!="string"&&(e=$i(e)),this.currentBatch?this.currentBatch.push(e):this.awaitingBatchAck?this.batchBuffer.push(e):(this.currentBatch=[e],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(e){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",e.join(`
`),()=>this.onerror("timeout"),t=>{this.awaitingBatchAck=!1,!t||t.status!==200?(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(e,t,i){for(let s of this.reqs)s.abort();this.readyState=V.closed;let r=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent!="undefined"?this.onclose(new CloseEvent("close",r)):this.onclose(r)}ajax(e,t,i,r,s){let n,o=()=>{this.reqs.delete(n),r()};n=He.request(e,this.endpointURL(),t,i,this.timeout,o,a=>{this.reqs.delete(n),this.isActive()&&s(a)}),this.reqs.add(n)}};var Fe={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,r,s,n,o]=JSON.parse(e);return t({join_ref:i,ref:r,topic:s,event:n,payload:o})}},binaryEncode(e){let{join_ref:t,ref:i,event:r,topic:s,payload:n}=e,o=this.META_LENGTH+t.length+i.length+s.length+r.length,a=new ArrayBuffer(this.HEADER_LENGTH+o),l=new DataView(a),h=0;l.setUint8(h++,this.KINDS.push),l.setUint8(h++,t.length),l.setUint8(h++,i.length),l.setUint8(h++,s.length),l.setUint8(h++,r.length),Array.from(t,p=>l.setUint8(h++,p.charCodeAt(0))),Array.from(i,p=>l.setUint8(h++,p.charCodeAt(0))),Array.from(s,p=>l.setUint8(h++,p.charCodeAt(0))),Array.from(r,p=>l.setUint8(h++,p.charCodeAt(0)));var c=new Uint8Array(a.byteLength+n.byteLength);return c.set(new Uint8Array(a),0),c.set(new Uint8Array(n),a.byteLength),c.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),r=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,r);case this.KINDS.reply:return this.decodeReply(e,t,r);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,r)}},decodePush(e,t,i){let r=t.getUint8(1),s=t.getUint8(2),n=t.getUint8(3),o=this.HEADER_LENGTH+this.META_LENGTH-1,a=i.decode(e.slice(o,o+r));o=o+r;let l=i.decode(e.slice(o,o+s));o=o+s;let h=i.decode(e.slice(o,o+n));o=o+n;let c=e.slice(o,e.byteLength);return{join_ref:a,ref:null,topic:l,event:h,payload:c}},decodeReply(e,t,i){let r=t.getUint8(1),s=t.getUint8(2),n=t.getUint8(3),o=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(a,a+r));a=a+r;let h=i.decode(e.slice(a,a+s));a=a+s;let c=i.decode(e.slice(a,a+n));a=a+n;let p=i.decode(e.slice(a,a+o));a=a+o;let f=e.slice(a,e.byteLength),m={status:p,response:f};return{join_ref:l,ref:h,topic:c,event:q.reply,payload:m}},decodeBroadcast(e,t,i){let r=t.getUint8(1),s=t.getUint8(2),n=this.HEADER_LENGTH+2,o=i.decode(e.slice(n,n+r));n=n+r;let a=i.decode(e.slice(n,n+s));n=n+s;let l=e.slice(n,e.byteLength);return{join_ref:null,ref:null,topic:o,event:a,payload:l}}},Ht=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||Hi,this.transport=t.transport||ce.WebSocket||xe,this.longPollFallbackMs=t.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=t.sessionStorage||ce.sessionStorage,this.establishedConnections=0,this.defaultEncoder=Fe.encode.bind(Fe),this.defaultDecoder=Fe.decode.bind(Fe),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==xe?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;ye&&ye.addEventListener&&(ye.addEventListener("pagehide",r=>{this.conn&&(this.disconnect(),i=this.connectClock)}),ye.addEventListener("pageshow",r=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=r=>t.rejoinAfterMs?t.rejoinAfterMs(r):[1e3,2e3,5e3][r-1]||1e4,this.reconnectAfterMs=r=>t.reconnectAfterMs?t.reconnectAfterMs(r):[10,50,100,150,200,250,500,1e3,2e3][r-1]||5e3,this.logger=t.logger||null,!this.logger&&t.debug&&(this.logger=(r,s,n)=>{console.log(`${r}: ${s}`,n)}),this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=be(t.params||{}),this.endPoint=`${e}/${ht.websocket}`,this.vsn=t.vsn||Mi,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new Mt(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return xe}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=He.appendParams(He.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=be(e)),!this.conn&&(this.longPollFallbackMs&&this.transport!==xe?this.connectWithFallback(xe,this.longPollFallbackMs):this.transportConnect())}log(e,t,i){this.logger&&this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let r=this.onMessage(s=>{s.ref===t&&(this.off([r]),e(Date.now()-i))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=e=>this.onConnError(e),this.conn.onmessage=e=>this.onConnMessage(e),this.conn.onclose=e=>this.onConnClose(e)}getSession(e){return this.sessionStore&&this.sessionStore.getItem(e)}storeSession(e,t){this.sessionStore&&this.sessionStore.setItem(e,t)}connectWithFallback(e,t=2500){clearTimeout(this.fallbackTimer);let i=!1,r=!0,s,n,o=a=>{this.log("transport",`falling back to ${e.name}...`,a),this.off([s,n]),r=!1,this.storeSession("phx:longpoll","true"),this.replaceTransport(e),this.transportConnect()};if(this.getSession("phx:longpoll"))return o("memorized");this.fallbackTimer=setTimeout(o,t),n=this.onError(a=>{this.log("transport","error",a),r&&!i&&(clearTimeout(this.fallbackTimer),o(a))}),this.onOpen(()=>{if(i=!0,!r)return console.log("transport",`established ${e.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(o,t),this.ping(a=>{this.log("transport","connected to primary after",a),clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),Fi,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===V.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,r])=>{r(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(q.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case V.connecting:return"connecting";case V.open:return"open";case V.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new Bi(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:r,ref:s,join_ref:n}=e;this.log("push",`${t} ${i} (${n}, ${s})`,r)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:r,payload:s,ref:n,join_ref:o}=t;n&&n===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${r} ${n&&"("+n+")"||""}`,s);for(let a=0;a<this.channels.length;a++){let l=this.channels[a];!l.isMember(i,r,s,o)||l.trigger(r,s,n,o)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,l]=this.stateChangeCallbacks.message[a];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var Ft="consecutive-reloads",Vi=10,ji=5e3,Ji=1e4,zi=3e4,Wi=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],K="data-phx-component",ct="data-phx-link",Xi="track-static",qi="data-phx-link-state",F="data-phx-ref",ne="data-phx-ref-src",Nt="track-uploads",G="data-phx-upload-ref",dt="data-phx-preflighted-refs",Ki="data-phx-done-refs",Bt="drop-target",ut="data-phx-active-refs",Ne="phx:live-file:updated",$t="data-phx-skip",Vt="data-phx-id",jt="data-phx-prune",Jt="page-loading",zt="phx-connected",Se="phx-loading",Be="phx-no-feedback",$e="phx-error",Wt="phx-client-error",ft="phx-server-error",oe="data-phx-parent-id",pt="data-phx-main",ae="data-phx-root-id",mt="viewport-top",gt="viewport-bottom",Gi="trigger-action",Ve="feedback-for",je="feedback-group",vt="phx-has-focused",Yi=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Xt=["checkbox","radio"],Je="phx-has-submitted",Y="data-phx-session",de=`[${Y}]`,qt="data-phx-sticky",ue="data-phx-static",wt="data-phx-readonly",fe="data-phx-disabled",bt="disable-with",ze="data-phx-disable-with-restore",Ee="hook",Zi="debounce",Qi="throttle",We="update",yt="stream",xt="data-phx-stream",er="key",j="phxPrivate",Kt="auto-recover",Xe="phx:live-socket:debug",St="phx:live-socket:profiling",Et="phx:live-socket:latency-sim",tr="progress",Gt="mounted",ir=1,rr=200,sr="phx-",nr=3e4,Ae="debounce-trigger",ke="throttled",Yt="debounce-prev-key",or={debounce:300,throttle:300},qe="d",J="s",At="r",D="c",Zt="e",Qt="r",ei="t",ar="p",ti="stream",lr=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.errored=!1,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(e))}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return H("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:t})=>this.error(t))}},H=(e,t)=>console.error&&console.error(e,t),Z=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function hr(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,r=t.length;i<r;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var cr=(e,t,i,r)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,r)},Te=e=>typeof e=="function"?e:function(){return e},Ke=e=>JSON.parse(JSON.stringify(e)),Ce=(e,t,i)=>{do{if(e.matches(`[${t}]`)&&!e.disabled)return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(de)));return null},pe=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),dr=(e,t)=>JSON.stringify(e)===JSON.stringify(t),ii=e=>{for(let t in e)return!1;return!0},te=(e,t)=>e&&t(e),ur=function(e,t,i,r){e.forEach(s=>{new lr(s,i.config.chunk_size,r).upload()})},ri={canPushState(){return typeof history.pushState!="undefined"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,r,s){let n=this.getLocal(e,t,i),o=this.localKey(t,i),a=n===null?r:s(n);return e.setItem(o,JSON.stringify(a)),a},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let r=this.getHashTargetEl(window.location.hash);r?r.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&ri.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},z=ri,fr={focusMain(){let e=document.querySelector("main h1, main, h1");if(e){let t=e.tabIndex;e.tabIndex=-1,e.focus(),e.tabIndex=t}},anyOf(e,t){return t.find(i=>e instanceof i)},isFocusable(e,t){return e instanceof HTMLAnchorElement&&e.rel!=="ignore"||e instanceof HTMLAreaElement&&e.href!==void 0||!e.disabled&&this.anyOf(e,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||e instanceof HTMLIFrameElement||e.tabIndex>0||!t&&e.getAttribute("tabindex")!==null&&e.getAttribute("aria-hidden")!=="true"},attemptFocus(e,t){if(this.isFocusable(e,t))try{e.focus()}catch(i){}return!!document.activeElement&&document.activeElement.isSameNode(e)},focusFirstInteractive(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(e){let t=e.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},me=fr,si=[],ni=200,pr={exec(e,t,i,r,s){let[n,o]=s||[null,{callback:s&&s.callback}];(t.charAt(0)==="["?JSON.parse(t):[[n,o]]).forEach(([l,h])=>{l===n&&o.data&&(h.data=Object.assign(h.data||{},o.data),h.callback=h.callback||o.callback),this.filterToEls(r,h).forEach(c=>{this[`exec_${l}`](e,t,i,r,c,h)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},isInViewport(e){let t=e.getBoundingClientRect(),i=window.innerHeight||document.documentElement.clientHeight,r=window.innerWidth||document.documentElement.clientWidth;return t.right>0&&t.bottom>0&&t.left<r&&t.top<i},exec_exec(e,t,i,r,s,{attr:n,to:o}){(o?d.all(document,o):[r]).forEach(l=>{let h=l.getAttribute(n);if(!h)throw new Error(`expected ${n} to contain JS command on "${o}"`);i.liveSocket.execJS(l,h,e)})},exec_dispatch(e,t,i,r,s,{to:n,event:o,detail:a,bubbles:l}){a=a||{},a.dispatcher=r,d.dispatchEvent(s,o,{detail:a,bubbles:l})},exec_push(e,t,i,r,s,n){let{event:o,data:a,target:l,page_loading:h,loading:c,value:p,dispatcher:f,callback:m}=n,v={loading:c,value:p,target:l,page_loading:!!h},b=e==="change"&&f?f:r,x=l||b.getAttribute(i.binding("target"))||b;i.withinTargets(x,(g,w)=>{if(!!g.isConnected())if(e==="change"){let{newCid:k,_target:C}=n;C=C||(d.isFormInput(r)?r.name:void 0),C&&(v._target=C),g.pushInput(r,w,k,o||t,v,m)}else if(e==="submit"){let{submitter:k}=n;g.submitForm(r,w,o||t,k,v,m)}else g.pushEvent(e,r,w,o||t,a,v,m)})},exec_navigate(e,t,i,r,s,{href:n,replace:o}){i.liveSocket.historyRedirect(n,o?"replace":"push")},exec_patch(e,t,i,r,s,{href:n,replace:o}){i.liveSocket.pushHistoryPatch(n,o?"replace":"push",r)},exec_focus(e,t,i,r,s){window.requestAnimationFrame(()=>me.attemptFocus(s))},exec_focus_first(e,t,i,r,s){window.requestAnimationFrame(()=>me.focusFirstInteractive(s)||me.focusFirst(s))},exec_push_focus(e,t,i,r,s){window.requestAnimationFrame(()=>si.push(s||r))},exec_pop_focus(e,t,i,r,s){window.requestAnimationFrame(()=>{let n=si.pop();n&&n.focus()})},exec_add_class(e,t,i,r,s,{names:n,transition:o,time:a}){this.addOrRemoveClasses(s,n,[],o,a,i)},exec_remove_class(e,t,i,r,s,{names:n,transition:o,time:a}){this.addOrRemoveClasses(s,[],n,o,a,i)},exec_toggle_class(e,t,i,r,s,{to:n,names:o,transition:a,time:l}){this.toggleClasses(s,o,a,l,i)},exec_toggle_attr(e,t,i,r,s,{attr:[n,o,a]}){s.hasAttribute(n)?a!==void 0?s.getAttribute(n)===o?this.setOrRemoveAttrs(s,[[n,a]],[]):this.setOrRemoveAttrs(s,[[n,o]],[]):this.setOrRemoveAttrs(s,[],[n]):this.setOrRemoveAttrs(s,[[n,o]],[])},exec_transition(e,t,i,r,s,{time:n,transition:o}){this.addOrRemoveClasses(s,[],[],o,n,i)},exec_toggle(e,t,i,r,s,{display:n,ins:o,outs:a,time:l}){this.toggle(e,i,s,n,o,a,l)},exec_show(e,t,i,r,s,{display:n,transition:o,time:a}){this.show(e,i,s,n,o,a)},exec_hide(e,t,i,r,s,{display:n,transition:o,time:a}){this.hide(e,i,s,n,o,a)},exec_set_attr(e,t,i,r,s,{attr:[n,o]}){this.setOrRemoveAttrs(s,[[n,o]],[])},exec_remove_attr(e,t,i,r,s,{attr:n}){this.setOrRemoveAttrs(s,[],[n])},show(e,t,i,r,s,n){this.isVisible(i)||this.toggle(e,t,i,r,s,null,n)},hide(e,t,i,r,s,n){this.isVisible(i)&&this.toggle(e,t,i,r,null,s,n)},toggle(e,t,i,r,s,n,o){o=o||ni;let[a,l,h]=s||[[],[],[]],[c,p,f]=n||[[],[],[]];if(a.length>0||c.length>0)if(this.isVisible(i)){let m=()=>{this.addOrRemoveClasses(i,p,a.concat(l).concat(h)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,c,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,f,p))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(o,m,()=>{this.addOrRemoveClasses(i,[],c.concat(f)),d.putSticky(i,"toggle",v=>v.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let m=()=>{this.addOrRemoveClasses(i,l,c.concat(p).concat(f));let v=r||this.defaultDisplay(i);d.putSticky(i,"toggle",b=>b.style.display=v),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,h,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(o,m,()=>{this.addOrRemoveClasses(i,[],a.concat(h)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),d.putSticky(i,"toggle",m=>m.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start"));let m=r||this.defaultDisplay(i);d.putSticky(i,"toggle",v=>v.style.display=m),i.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(e,t,i,r,s){window.requestAnimationFrame(()=>{let[n,o]=d.getSticky(e,"classes",[[],[]]),a=t.filter(h=>n.indexOf(h)<0&&!e.classList.contains(h)),l=t.filter(h=>o.indexOf(h)<0&&e.classList.contains(h));this.addOrRemoveClasses(e,a,l,i,r,s)})},addOrRemoveClasses(e,t,i,r,s,n){s=s||ni;let[o,a,l]=r||[[],[],[]];if(o.length>0){let h=()=>{this.addOrRemoveClasses(e,a,[].concat(o).concat(l)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(e,o,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(e,l,a))})},c=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(o).concat(a));return n.transition(s,h,c)}window.requestAnimationFrame(()=>{let[h,c]=d.getSticky(e,"classes",[[],[]]),p=t.filter(b=>h.indexOf(b)<0&&!e.classList.contains(b)),f=i.filter(b=>c.indexOf(b)<0&&e.classList.contains(b)),m=h.filter(b=>i.indexOf(b)<0).concat(p),v=c.filter(b=>t.indexOf(b)<0).concat(f);d.putSticky(e,"classes",b=>(b.classList.remove(...v),b.classList.add(...m),[m,v]))})},setOrRemoveAttrs(e,t,i){let[r,s]=d.getSticky(e,"attrs",[[],[]]),n=t.map(([l,h])=>l).concat(i),o=r.filter(([l,h])=>!n.includes(l)).concat(t),a=s.filter(l=>!n.includes(l)).concat(i);d.putSticky(e,"attrs",l=>(a.forEach(h=>l.removeAttribute(h)),o.forEach(([h,c])=>l.setAttribute(h,c)),[o,a]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?d.all(document,t):[e]},defaultDisplay(e){return{tr:"table-row",td:"table-cell"}[e.tagName.toLowerCase()]||"block"}},L=pr,B={byId(e){return document.getElementById(e)||H(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let r=Array.from(e.querySelectorAll(t));return i?r.forEach(i):r},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(G)!==null},isAutoUpload(e){return e.hasAttribute("data-phx-auto-upload")},findUploadInputs(e){let t=e.id,i=this.all(document,`input[type="file"][${G}][form="${t}"]`);return this.all(e,`input[type="file"][${G}]`).concat(i)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${K}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&B.private(e,"destroyed"))},wantsNewTab(e){let t=e.ctrlKey||e.shiftKey||e.metaKey||e.button&&e.button===1,i=e.target instanceof HTMLAnchorElement&&e.target.hasAttribute("download"),r=e.target.hasAttribute("target")&&e.target.getAttribute("target").toLowerCase()==="_blank",s=e.target.hasAttribute("target")&&!e.target.getAttribute("target").startsWith("_");return t||r||i||s},isUnloadableFormSubmit(e){return e.target&&e.target.getAttribute("method")==="dialog"||e.submitter&&e.submitter.getAttribute("formmethod")==="dialog"?!1:!e.defaultPrevented&&!this.wantsNewTab(e)},isNewPageClick(e,t){let i=e.target instanceof HTMLAnchorElement?e.target.getAttribute("href"):null,r;if(e.defaultPrevented||i===null||this.wantsNewTab(e)||i.startsWith("mailto:")||i.startsWith("tel:")||e.target.isContentEditable)return!1;try{r=new URL(i)}catch(s){try{r=new URL(i,t)}catch(n){return!0}}return r.host===t.host&&r.protocol===t.protocol&&r.pathname===t.pathname&&r.search===t.search?r.hash===""&&!r.href.endsWith("#"):r.protocol.startsWith("http")},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(Y,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${qt}]`)},findPhxChildren(e,t){return this.all(e,`${de}[${oe}="${t}"]`)},findExistingParentCIDs(e,t){let i=new Set,r=new Set;return t.forEach(s=>{this.filterWithinSameLiveView(this.all(e,`[${K}="${s}"]`),e).forEach(n=>{i.add(s),this.all(n,`[${K}]`).map(o=>parseInt(o.getAttribute(K))).forEach(o=>r.add(o))})}),r.forEach(s=>i.delete(s)),i},filterWithinSameLiveView(e,t){return t.querySelector(de)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(Y)!==null)return!1}},private(e,t){return e[j]&&e[j][t]},deletePrivate(e,t){e[j]&&delete e[j][t]},putPrivate(e,t,i){e[j]||(e[j]={}),e[j][t]=i},updatePrivate(e,t,i,r){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,r(i)):this.putPrivate(e,t,r(s))},copyPrivates(e,t){t[j]&&(e[j]=t[j])},putTitle(e){let t=document.querySelector("title");if(t){let{prefix:i,suffix:r}=t.dataset;document.title=`${i||""}${e}${r||""}`}else document.title=e},debounce(e,t,i,r,s,n,o,a){let l=e.getAttribute(i),h=e.getAttribute(s);l===""&&(l=r),h===""&&(h=n);let c=l||h;switch(c){case null:return a();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>{o()&&a()});return;default:let p=parseInt(c),f=()=>h?this.deletePrivate(e,ke):a(),m=this.incCycle(e,Ae,f);if(isNaN(p))return H(`invalid throttle/debounce value: ${c}`);if(h){let b=!1;if(t.type==="keydown"){let x=this.private(e,Yt);this.putPrivate(e,Yt,t.key),b=x!==t.key}if(!b&&this.private(e,ke))return!1;{a();let x=setTimeout(()=>{o()&&this.triggerCycle(e,Ae)},p);this.putPrivate(e,ke,x)}}else setTimeout(()=>{o()&&this.triggerCycle(e,Ae,m)},p);let v=e.form;v&&this.once(v,"bind-debounce")&&v.addEventListener("submit",()=>{Array.from(new FormData(v).entries(),([b])=>{let x=v.querySelector(`[name="${b}"]`);this.incCycle(x,Ae),this.deletePrivate(x,ke)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>{clearTimeout(this.private(e,ke)),this.triggerCycle(e,Ae)})}},triggerCycle(e,t,i){let[r,s]=this.private(e,t);i||(i=r),i===r&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[r]=this.private(e,t)||[0,i];return r++,this.putPrivate(e,t,[r,i]),r},maybeAddPrivateHooks(e,t,i){e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(i))&&e.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},isFeedbackContainer(e,t){return e.hasAttribute&&e.hasAttribute(t)},maybeHideFeedback(e,t,i,r){let s={};t.forEach(n=>{if(!e.contains(n))return;let o=n.getAttribute(i);if(!o){L.addOrRemoveClasses(n,[],[Be]);return}if(s[o]===!0){this.hideFeedback(n);return}s[o]=this.shouldHideFeedback(e,o,r),s[o]===!0&&this.hideFeedback(n)})},hideFeedback(e){L.addOrRemoveClasses(e,[Be],[])},shouldHideFeedback(e,t,i){let r=`[name="${t}"],
                   [name="${t}[]"],
                   [${i}="${t}"]`,s=!1;return B.all(e,r,n=>{(this.private(n,vt)||this.private(n,Je))&&(s=!0)}),!s},feedbackSelector(e,t,i){let r=`[${t}="${e.name}"],
                 [${t}="${e.name.replace(/\[\]$/,"")}"]`;return e.getAttribute(i)&&(r+=`,[${t}="${e.getAttribute(i)}"]`),r},resetForm(e,t,i){Array.from(e.elements).forEach(r=>{let s=this.feedbackSelector(r,t,i);this.deletePrivate(r,vt),this.deletePrivate(r,Je),this.all(document,s,n=>{L.addOrRemoveClasses(n,[Be],[])})})},showError(e,t,i){if(e.name){let r=this.feedbackSelector(e,t,i);this.all(document,r,s=>{L.addOrRemoveClasses(s,[],[Be])})}},isPhxChild(e){return e.getAttribute&&e.getAttribute(oe)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(qt)!==null},isChildOfAny(e,t){return!!t.find(i=>i.contains(e))},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${oe}]`)[0]},dispatchEvent(e,t,i={}){let r=!0;e.nodeName==="INPUT"&&e.type==="file"&&t==="click"&&(r=!1);let o={bubbles:i.bubbles===void 0?r:!!i.bubbles,cancelable:!0,detail:i.detail||{}},a=t==="click"?new MouseEvent("click",o):new CustomEvent(t,o);e.dispatchEvent(a)},cloneNode(e,t){if(typeof t=="undefined")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let r=new Set(i.exclude||[]),s=i.isIgnored,n=t.attributes;for(let a=n.length-1;a>=0;a--){let l=n[a].name;if(r.has(l))l==="value"&&e.value===t.value&&e.setAttribute("value",t.getAttribute(l));else{let h=t.getAttribute(l);e.getAttribute(l)!==h&&(!s||s&&l.startsWith("data-"))&&e.setAttribute(l,h)}}let o=e.attributes;for(let a=o.length-1;a>=0;a--){let l=o[a].name;s?l.startsWith("data-")&&!t.hasAttribute(l)&&![F,ne].includes(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||B.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(e instanceof HTMLSelectElement&&e.focus(),!B.isTextualInput(e))return;e.matches(":focus")||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&Xt.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return Yi.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){if(e.getAttribute(F)===null)return!0;let s=e.getAttribute(ne);return B.isUploadInput(e)&&B.mergeAttrs(e,t,{isIgnored:!0}),B.putPrivate(e,F,t),!1},cleanChildNodes(e,t){if(B.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(r=>{r.id||(!(r.nodeType===Node.TEXT_NODE&&r.nodeValue.trim()==="")&&r.nodeType!==Node.COMMENT_NODE&&H(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(r.outerHTML||r.nodeValue).trim()}"

`),i.push(r))}),i.forEach(r=>r.remove())}},replaceRootContainer(e,t,i){let r=new Set(["id",Y,ue,pt,ae]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!r.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!r.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(n=>s.setAttribute(n,i[n])),r.forEach(n=>s.setAttribute(n,e.getAttribute(n))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let r=(B.private(e,"sticky")||[]).find(([s])=>t===s);if(r){let[s,n,o]=r;return o}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([r,s])=>r!==t))},putSticky(e,t,i){let r=i(e);this.updatePrivate(e,"sticky",[],s=>{let n=s.findIndex(([o])=>t===o);return n>=0?s[n]=[t,i,r]:s.push([t,i,r]),s})},applyStickyOperations(e){let t=B.private(e,"sticky");!t||t.forEach(([i,r,s])=>this.putSticky(e,i,r))}},d=B,_e=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(ut).split(",").indexOf(I.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(dt).split(",").indexOf(I.genFileRef(t))>=0&&this.isActive(e,t)}static isPreflightInProgress(e){return e._preflightInProgress===!0}static markPreflightInProgress(e){e._preflightInProgress=!0}constructor(e,t,i,r){this.ref=I.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Ne,this._onElUpdated),this.autoUpload=r}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{I.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.fileEl.removeEventListener(Ne,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),this.isAutoUpload()||I.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(Ne,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(ut).split(",").indexOf(this.ref)===-1&&(I.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||H(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:ur}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||H(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},mr=0,I=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(mr++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let r=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(r))}static hasUploadsInProgress(e){let t=0;return d.findUploadInputs(e).forEach(i=>{i.getAttribute(dt)!==i.getAttribute(Ki)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(r=>{let s={path:e.name},n=e.getAttribute(G);i[n]=i[n]||[],s.ref=this.genFileRef(r),s.last_modified=r.lastModified,s.name=r.name||s.ref,s.relative_path=r.webkitRelativePath,s.type=r.type,s.size=r.size,typeof r.meta=="function"&&(s.meta=r.meta()),i[n].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(G),d.putPrivate(e,"files",[])}static untrackFile(e,t){d.putPrivate(e,"files",d.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t,i){if(e.getAttribute("multiple")!==null){let r=t.filter(s=>!this.activeFiles(e).find(n=>Object.is(n,s)));d.updatePrivate(e,"files",[],s=>s.concat(r)),e.value=null}else i&&i.files.length>0&&(e.files=i.files),d.putPrivate(e,"files",t)}static activeFileInputs(e){let t=d.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(d.private(e,"files")||[]).filter(t=>_e.isActive(e,t))}static inputsAwaitingPreflight(e){let t=d.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!_e.isPreflighted(e,t)&&!_e.isPreflightInProgress(t))}static markPreflightInProgress(e){e.forEach(t=>_e.markPreflightInProgress(t.file))}constructor(e,t,i){this.autoUpload=d.isAutoUpload(e),this.view=t,this.onComplete=i,this._entries=Array.from(I.filesAwaitingPreflight(e)||[]).map(r=>new _e(e,r,t,this.autoUpload)),I.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),s));let r=this._entries.reduce((s,n)=>{if(!n.meta)return s;let{name:o,callback:a}=n.uploader(i.uploaders);return s[o]=s[o]||{callback:a,entries:[]},s[o].entries.push(n),s},{});for(let s in r){let{callback:n,entries:o}=r[s];n(o,t,e,i)}}},oi={LiveFileUpload:{activeRefs(){return this.el.getAttribute(ut)},preflightedRefs(){return this.el.getAttribute(dt)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Ne))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(G)),I.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>me.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>me.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&me.focusFirst(this.el)}}},ai=e=>["HTML","BODY"].indexOf(e.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(e).overflowY)>=0?e:ai(e.parentElement),li=e=>e?e.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,kt=e=>e?e.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,Tt=e=>e?e.getBoundingClientRect().top:0,gr=(e,t)=>{let i=e.getBoundingClientRect();return i.top>=Tt(t)&&i.left>=0&&i.top<=kt(t)},vr=(e,t)=>{let i=e.getBoundingClientRect();return i.right>=Tt(t)&&i.left>=0&&i.bottom<=kt(t)},hi=(e,t)=>{let i=e.getBoundingClientRect();return i.top>=Tt(t)&&i.left>=0&&i.top<=kt(t)};oi.InfiniteScroll={mounted(){this.scrollContainer=ai(this.el);let e=li(this.scrollContainer),t=!1,i=500,r=null,s=this.throttle(i,(a,l)=>{r=()=>!0,this.liveSocket.execJSHookPush(this.el,a,{id:l.id,_overran:!0},()=>{r=null})}),n=this.throttle(i,(a,l)=>{r=()=>l.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{r=null,window.requestAnimationFrame(()=>{hi(l,this.scrollContainer)||l.scrollIntoView({block:"start"})})})}),o=this.throttle(i,(a,l)=>{r=()=>l.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{r=null,window.requestAnimationFrame(()=>{hi(l,this.scrollContainer)||l.scrollIntoView({block:"end"})})})});this.onScroll=a=>{let l=li(this.scrollContainer);if(r)return e=l,r();let h=this.el.getBoundingClientRect(),c=this.el.getAttribute(this.liveSocket.binding("viewport-top")),p=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),f=this.el.lastElementChild,m=this.el.firstElementChild,v=l<e,b=l>e;v&&c&&!t&&h.top>=0?(t=!0,s(c,m)):b&&t&&h.top<=0&&(t=!1),c&&v&&gr(m,this.scrollContainer)?n(c,m):p&&b&&vr(f,this.scrollContainer)&&o(p,f),e=l},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(e,t){let i=0,r;return(...s)=>{let n=Date.now(),o=e-(n-i);o<=0||o>e?(r&&(clearTimeout(r),r=null),i=n,t(...s)):r||(r=setTimeout(()=>{i=Date.now(),r=null,t(...s)},o))}}};var wr=oi,br=class{constructor(e,t,i){let r=new Set,s=new Set([...t.children].map(o=>o.id)),n=[];Array.from(e.children).forEach(o=>{if(o.id&&(r.add(o.id),s.has(o.id))){let a=o.previousElementSibling&&o.previousElementSibling.id;n.push({elementId:o.id,previousElementId:a})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=n,this.elementIdsToAdd=[...s].filter(o=>!r.has(o))}perform(){let e=d.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?te(document.getElementById(t.previousElementId),i=>{te(document.getElementById(t.elementId),r=>{r.previousElementSibling&&r.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",r)})}):te(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{te(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},ci=11;function yr(e,t){var i=t.attributes,r,s,n,o,a;if(!(t.nodeType===ci||e.nodeType===ci)){for(var l=i.length-1;l>=0;l--)r=i[l],s=r.name,n=r.namespaceURI,o=r.value,n?(s=r.localName||s,a=e.getAttributeNS(n,s),a!==o&&(r.prefix==="xmlns"&&(s=r.name),e.setAttributeNS(n,s,o))):(a=e.getAttribute(s),a!==o&&e.setAttribute(s,o));for(var h=e.attributes,c=h.length-1;c>=0;c--)r=h[c],s=r.name,n=r.namespaceURI,n?(s=r.localName||s,t.hasAttributeNS(n,s)||e.removeAttributeNS(n,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var Ge,xr="http://www.w3.org/1999/xhtml",O=typeof document=="undefined"?void 0:document,Sr=!!O&&"content"in O.createElement("template"),Er=!!O&&O.createRange&&"createContextualFragment"in O.createRange();function Ar(e){var t=O.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function kr(e){Ge||(Ge=O.createRange(),Ge.selectNode(O.body));var t=Ge.createContextualFragment(e);return t.childNodes[0]}function Tr(e){var t=O.createElement("body");return t.innerHTML=e,t.childNodes[0]}function Cr(e){return e=e.trim(),Sr?Ar(e):Er?kr(e):Tr(e)}function Ye(e,t){var i=e.nodeName,r=t.nodeName,s,n;return i===r?!0:(s=i.charCodeAt(0),n=r.charCodeAt(0),s<=90&&n>=97?i===r.toUpperCase():n<=90&&s>=97?r===i.toUpperCase():!1)}function _r(e,t){return!t||t===xr?O.createElement(e):O.createElementNS(t,e)}function Rr(e,t){for(var i=e.firstChild;i;){var r=i.nextSibling;t.appendChild(i),i=r}return t}function Ct(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var di={OPTION:function(e,t){var i=e.parentNode;if(i){var r=i.nodeName.toUpperCase();r==="OPTGROUP"&&(i=i.parentNode,r=i&&i.nodeName.toUpperCase()),r==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}Ct(e,t,"selected")},INPUT:function(e,t){Ct(e,t,"checked"),Ct(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var r=e.firstChild;if(r){var s=r.nodeValue;if(s==i||!i&&s==e.placeholder)return;r.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,r=0,s=e.firstChild,n,o;s;)if(o=s.nodeName&&s.nodeName.toUpperCase(),o==="OPTGROUP")n=s,s=n.firstChild;else{if(o==="OPTION"){if(s.hasAttribute("selected")){i=r;break}r++}s=s.nextSibling,!s&&n&&(s=n.nextSibling,n=null)}e.selectedIndex=i}}},Re=1,ui=11,fi=3,pi=8;function ie(){}function Pr(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function Ir(e){return function(i,r,s){if(s||(s={}),typeof r=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var n=r;r=O.createElement("html"),r.innerHTML=n}else r=Cr(r);else r.nodeType===ui&&(r=r.firstElementChild);var o=s.getNodeKey||Pr,a=s.onBeforeNodeAdded||ie,l=s.onNodeAdded||ie,h=s.onBeforeElUpdated||ie,c=s.onElUpdated||ie,p=s.onBeforeNodeDiscarded||ie,f=s.onNodeDiscarded||ie,m=s.onBeforeElChildrenUpdated||ie,v=s.skipFromChildren||ie,b=s.addChild||function(E,y){return E.appendChild(y)},x=s.childrenOnly===!0,g=Object.create(null),w=[];function k(E){w.push(E)}function C(E,y){if(E.nodeType===Re)for(var R=E.firstChild;R;){var A=void 0;y&&(A=o(R))?k(A):(f(R),R.firstChild&&C(R,y)),R=R.nextSibling}}function $(E,y,R){p(E)!==!1&&(y&&y.removeChild(E),f(E),C(E,R))}function P(E){if(E.nodeType===Re||E.nodeType===ui)for(var y=E.firstChild;y;){var R=o(y);R&&(g[R]=y),P(y),y=y.nextSibling}}P(i);function W(E){l(E);for(var y=E.firstChild;y;){var R=y.nextSibling,A=o(y);if(A){var _=g[A];_&&Ye(y,_)?(y.parentNode.replaceChild(_,y),u(_,y)):W(y)}else W(y);y=R}}function re(E,y,R){for(;y;){var A=y.nextSibling;(R=o(y))?k(R):$(y,E,!0),y=A}}function u(E,y,R){var A=o(y);A&&delete g[A],!(!R&&(h(E,y)===!1||(e(E,y),c(E),m(E,y)===!1)))&&(E.nodeName!=="TEXTAREA"?S(E,y):di.TEXTAREA(E,y))}function S(E,y){var R=v(E,y),A=y.firstChild,_=E.firstChild,le,X,he,Ue,Q;e:for(;A;){for(Ue=A.nextSibling,le=o(A);!R&&_;){if(he=_.nextSibling,A.isSameNode&&A.isSameNode(_)){A=Ue,_=he;continue e}X=o(_);var Oe=_.nodeType,ee=void 0;if(Oe===A.nodeType&&(Oe===Re?(le?le!==X&&((Q=g[le])?he===Q?ee=!1:(E.insertBefore(Q,_),X?k(X):$(_,E,!0),_=Q,X=o(_)):ee=!1):X&&(ee=!1),ee=ee!==!1&&Ye(_,A),ee&&u(_,A)):(Oe===fi||Oe==pi)&&(ee=!0,_.nodeValue!==A.nodeValue&&(_.nodeValue=A.nodeValue))),ee){A=Ue,_=he;continue e}X?k(X):$(_,E,!0),_=he}if(le&&(Q=g[le])&&Ye(Q,A))R||b(E,Q),u(Q,A);else{var lt=a(A);lt!==!1&&(lt&&(A=lt),A.actualize&&(A=A.actualize(E.ownerDocument||O)),b(E,A),W(A))}A=Ue,_=he}re(E,_,X);var Ut=di[E.nodeName];Ut&&Ut(E,y)}var T=i,U=T.nodeType,se=r.nodeType;if(!x){if(U===Re)se===Re?Ye(i,r)||(f(i),T=Rr(i,_r(r.nodeName,r.namespaceURI))):T=r;else if(U===fi||U===pi){if(se===U)return T.nodeValue!==r.nodeValue&&(T.nodeValue=r.nodeValue),T;T=r}}if(T===r)f(i);else{if(r.isSameNode&&r.isSameNode(T))return;if(u(T,r,x),w)for(var ot=0,Di=w.length;ot<Di;ot++){var at=g[w[ot]];at&&$(at,at.parentNode,!1)}}return!x&&T!==i&&i.parentNode&&(T.actualize&&(T=T.actualize(i.ownerDocument||O)),i.parentNode.replaceChild(T,i)),T}}var Dr=Ir(yr),mi=Dr,Ze=class{static patchEl(e,t,i){mi(e,t,{childrenOnly:!1,onBeforeElUpdated:(r,s)=>{if(i&&i.isSameNode(r)&&d.isFormInput(r))return d.mergeFocusedInput(r,s),!1}})}constructor(e,t,i,r,s,n){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=r,this.streams=s,this.streamInserts={},this.streamComponentRestore={},this.targetCID=n,this.cidPatch=Z(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){let e=this.liveSocket.binding(We);d.all(this.container,`[${e}=append] > *, [${e}=prepend] > *`,t=>{t.setAttribute(jt,"")})}perform(e){let{view:t,liveSocket:i,container:r,html:s}=this,n=this.isCIDPatch()?this.targetCIDContainer(s):r;if(this.isCIDPatch()&&!n)return;let o=i.getActiveElement(),{selectionStart:a,selectionEnd:l}=o&&d.hasSelectionRange(o)?o:{},h=i.binding(We),c=i.binding(Ve),p=i.binding(je),f=i.binding(bt),m=i.binding(mt),v=i.binding(gt),b=i.binding(Gi),x=[],g=[],w=[],k=[],C=null;function $(P,W,re=!1){mi(P,W,{childrenOnly:P.getAttribute(K)===null&&!re,getNodeKey:u=>d.isPhxDestroyed(u)?null:e?u.id:u.id||u.getAttribute&&u.getAttribute(Vt),skipFromChildren:u=>u.getAttribute(h)===yt,addChild:(u,S)=>{let{ref:T,streamAt:U}=this.getStreamInsert(S);if(T===void 0)return u.appendChild(S);if(this.setStreamRef(S,T),U===0)u.insertAdjacentElement("afterbegin",S);else if(U===-1)u.appendChild(S);else if(U>0){let se=Array.from(u.children)[U];u.insertBefore(S,se)}},onBeforeNodeAdded:u=>{d.maybeAddPrivateHooks(u,m,v),this.trackBefore("added",u);let S=u;return!e&&this.streamComponentRestore[u.id]&&(S=this.streamComponentRestore[u.id],delete this.streamComponentRestore[u.id],$.call(this,S,u,!0)),S},onNodeAdded:u=>{u.getAttribute&&this.maybeReOrderStream(u,!0),d.isFeedbackContainer(u,c)&&g.push(u),u instanceof HTMLImageElement&&u.srcset?u.srcset=u.srcset:u instanceof HTMLVideoElement&&u.autoplay&&u.play(),d.isNowTriggerFormExternal(u,b)&&(C=u),(d.isPhxChild(u)&&t.ownsElement(u)||d.isPhxSticky(u)&&t.ownsElement(u.parentNode))&&this.trackAfter("phxChildAdded",u),x.push(u)},onNodeDiscarded:u=>this.onNodeDiscarded(u),onBeforeNodeDiscarded:u=>u.getAttribute&&u.getAttribute(jt)!==null?!0:!(u.parentElement!==null&&u.id&&d.isPhxUpdate(u.parentElement,h,[yt,"append","prepend"])||this.maybePendingRemove(u)||this.skipCIDSibling(u)),onElUpdated:u=>{d.isNowTriggerFormExternal(u,b)&&(C=u),w.push(u),this.maybeReOrderStream(u,!1)},onBeforeElUpdated:(u,S)=>{if(d.maybeAddPrivateHooks(S,m,v),(d.isFeedbackContainer(u,c)||d.isFeedbackContainer(S,c))&&(g.push(u),g.push(S)),d.cleanChildNodes(S,h),this.skipCIDSibling(S))return this.maybeReOrderStream(u),!1;if(d.isPhxSticky(u))return!1;if(d.isIgnored(u,h)||u.form&&u.form.isSameNode(C))return this.trackBefore("updated",u,S),d.mergeAttrs(u,S,{isIgnored:d.isIgnored(u,h)}),w.push(u),d.applyStickyOperations(u),!1;if(u.type==="number"&&u.validity&&u.validity.badInput)return!1;if(!d.syncPendingRef(u,S,f))return d.isUploadInput(u)&&(this.trackBefore("updated",u,S),w.push(u)),d.applyStickyOperations(u),!1;if(d.isPhxChild(S)){let se=u.getAttribute(Y);return d.mergeAttrs(u,S,{exclude:[ue]}),se!==""&&u.setAttribute(Y,se),u.setAttribute(ae,this.rootID),d.applyStickyOperations(u),!1}d.copyPrivates(S,u);let T=o&&u.isSameNode(o)&&d.isFormInput(u),U=T&&this.isChangedSelect(u,S);return T&&u.type!=="hidden"&&!U?(this.trackBefore("updated",u,S),d.mergeFocusedInput(u,S),d.syncAttrsToProps(u),w.push(u),d.applyStickyOperations(u),!1):(U&&u.blur(),d.isPhxUpdate(S,h,["append","prepend"])&&k.push(new br(u,S,S.getAttribute(h))),d.syncAttrsToProps(S),d.applyStickyOperations(S),this.trackBefore("updated",u,S),!0)}})}return this.trackBefore("added",r),this.trackBefore("updated",r,r),i.time("morphdom",()=>{this.streams.forEach(([P,W,re,u])=>{W.forEach(([S,T,U])=>{this.streamInserts[S]={ref:P,streamAt:T,limit:U,reset:u}}),u!==void 0&&d.all(r,`[${xt}="${P}"]`,S=>{this.removeStreamChildElement(S)}),re.forEach(S=>{let T=r.querySelector(`[id="${S}"]`);T&&this.removeStreamChildElement(T)})}),e&&d.all(this.container,`[${h}=${yt}]`,P=>{this.liveSocket.owner(P,W=>{W===this.view&&Array.from(P.children).forEach(re=>{this.removeStreamChildElement(re)})})}),$.call(this,n,s)}),i.isDebugEnabled()&&(hr(),Array.from(document.querySelectorAll("input[name=id]")).forEach(P=>{P.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,P)})),k.length>0&&i.time("post-morph append/prepend restoration",()=>{k.forEach(P=>P.perform())}),d.maybeHideFeedback(n,g,c,p),i.silenceEvents(()=>d.restoreFocus(o,a,l)),d.dispatchEvent(document,"phx:update"),x.forEach(P=>this.trackAfter("added",P)),w.forEach(P=>this.trackAfter("updated",P)),this.transitionPendingRemoves(),C&&(i.unload(),Object.getPrototypeOf(C).submit.call(C)),!0}onNodeDiscarded(e){(d.isPhxChild(e)||d.isPhxSticky(e))&&this.liveSocket.destroyViewByEl(e),this.trackAfter("discarded",e)}maybePendingRemove(e){return e.getAttribute&&e.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(e),!0):!1}removeStreamChildElement(e){this.streamInserts[e.id]?(this.streamComponentRestore[e.id]=e,e.remove()):this.maybePendingRemove(e)||(e.remove(),this.onNodeDiscarded(e))}getStreamInsert(e){return(e.id?this.streamInserts[e.id]:{})||{}}setStreamRef(e,t){d.putSticky(e,xt,i=>i.setAttribute(xt,t))}maybeReOrderStream(e,t){let{ref:i,streamAt:r,reset:s}=this.getStreamInsert(e);if(r!==void 0&&(this.setStreamRef(e,i),!(!s&&!t)&&!!e.parentElement)){if(r===0)e.parentElement.insertBefore(e,e.parentElement.firstElementChild);else if(r>0){let n=Array.from(e.parentElement.children),o=n.indexOf(e);if(r>=n.length-1)e.parentElement.appendChild(e);else{let a=n[r];o>r?e.parentElement.insertBefore(e,a):e.parentElement.insertBefore(e,a.nextElementSibling)}}this.maybeLimitStream(e)}}maybeLimitStream(e){let{limit:t}=this.getStreamInsert(e),i=t!==null&&Array.from(e.parentElement.children);t&&t<0&&i.length>t*-1?i.slice(0,i.length+t).forEach(r=>this.removeStreamChildElement(r)):t&&t>=0&&i.length>t&&i.slice(t).forEach(r=>this.removeStreamChildElement(r))}transitionPendingRemoves(){let{pendingRemoves:e,liveSocket:t}=this;e.length>0&&(t.transitionRemoves(e),t.requestDOMUpdate(()=>{e.forEach(i=>{let r=d.firstPhxChild(i);r&&t.destroyViewByEl(r),i.remove()}),this.trackAfter("transitionsDiscarded",e)}))}isChangedSelect(e,t){if(!(e instanceof HTMLSelectElement)||e.multiple)return!1;if(e.options.length!==t.options.length)return!0;let i=e.selectedOptions[0],r=t.selectedOptions[0];return i&&i.hasAttribute("selected")&&r.setAttribute("selected",i.getAttribute("selected")),!e.isEqualNode(t)}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.hasAttribute($t)}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=d.findComponentNodeList(this.container,this.targetCID);return i.length===0&&d.childNodeLength(e)===1?t:t&&t.parentNode}indexOf(e,t){return Array.from(e.children).indexOf(t)}},Lr=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),Ur=new Set(["'",'"']),gi=(e,t,i)=>{let r=0,s=!1,n,o,a,l,h,c,p=e.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(p===null)throw new Error(`malformed html ${e}`);for(r=p[0].length,n=p[1],a=p[2],l=r,r;r<e.length&&e.charAt(r)!==">";r++)if(e.charAt(r)==="="){let v=e.slice(r-3,r)===" id";r++;let b=e.charAt(r);if(Ur.has(b)){let x=r;for(r++,r;r<e.length&&e.charAt(r)!==b;r++);if(v){h=e.slice(x+1,r);break}}}let f=e.length-1;for(s=!1;f>=n.length+a.length;){let v=e.charAt(f);if(s)v==="-"&&e.slice(f-3,f)==="<!-"?(s=!1,f-=4):f-=1;else if(v===">"&&e.slice(f-2,f)==="--")s=!0,f-=3;else{if(v===">")break;f-=1}}o=e.slice(f+1,e.length);let m=Object.keys(t).map(v=>t[v]===!0?v:`${v}="${t[v]}"`).join(" ");if(i){let v=h?` id="${h}"`:"";Lr.has(a)?c=`<${a}${v}${m===""?"":" "}${m}/>`:c=`<${a}${v}${m===""?"":" "}${m}></${a}>`}else{let v=e.slice(l,f+1);c=`<${a}${m===""?"":" "}${m}${v}`}return[c,n,o]},vi=class{static extract(e){let{[Qt]:t,[Zt]:i,[ei]:r}=e;return delete e[Qt],delete e[Zt],delete e[ei],{diff:e,title:r,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.magicId=0,this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){let[t,i]=this.recursiveToString(this.rendered,this.rendered[D],e,!0,{});return[t,i]}recursiveToString(e,t=e[D],i,r,s){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i,streams:new Set};return this.toOutputBuffer(e,null,n,r,s),[n.buffer,n.streams]}componentCIDs(e){return Object.keys(e[D]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[D]?Object.keys(e).length===1:!1}getComponent(e,t){return e[D][t]}resetRender(e){this.rendered[D][e]&&(this.rendered[D][e].reset=!0)}mergeDiff(e){let t=e[D],i={};if(delete e[D],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[D]=this.rendered[D]||{},t){let r=this.rendered[D];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],r,t,i);for(let s in t)r[s]=t[s];e[D]=t}}cachedFindComponent(e,t,i,r,s){if(s[e])return s[e];{let n,o,a=t[J];if(Z(a)){let l;a>0?l=this.cachedFindComponent(a,r[a],i,r,s):l=i[-a],o=l[J],n=this.cloneMerge(l,t,!0),n[J]=o}else n=t[J]!==void 0||i[e]===void 0?t:this.cloneMerge(i[e],t,!1);return s[e]=n,n}}mutableMerge(e,t){return t[J]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let r=t[i],s=e[i];pe(r)&&r[J]===void 0&&pe(s)?this.doMutableMerge(s,r):e[i]=r}e[At]&&(e.newRender=!0)}cloneMerge(e,t,i){let r={...e,...t};for(let s in r){let n=t[s],o=e[s];pe(n)&&n[J]===void 0&&pe(o)?r[s]=this.cloneMerge(o,n,i):n===void 0&&pe(o)&&(r[s]=this.cloneMerge(o,{},i))}return i?(delete r.magicId,delete r.newRender):e[At]&&(r.newRender=!0),r}componentToString(e){let[t,i]=this.recursiveCIDToString(this.rendered[D],e,null),[r,s,n]=gi(t,{});return[r,i]}pruneCIDs(e){e.forEach(t=>delete this.rendered[D][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[J]}templateStatic(e,t){return typeof e=="number"?t[e]:e}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(e,t,i,r,s={}){if(e[qe])return this.comprehensionToBuffer(e,t,i);let{[J]:n}=e;n=this.templateStatic(n,t);let o=e[At],a=i.buffer;o&&(i.buffer=""),r&&o&&!e.magicId&&(e.newRender=!0,e.magicId=this.nextMagicID()),i.buffer+=n[0];for(let l=1;l<n.length;l++)this.dynamicToBuffer(e[l-1],t,i,r),i.buffer+=n[l];if(o){let l=!1,h;r||e.magicId?(l=r&&!e.newRender,h={[Vt]:e.magicId,...s}):h=s,l&&(h[$t]=!0);let[c,p,f]=gi(i.buffer,h,l);e.newRender=!1,i.buffer=a+p+c+f}}comprehensionToBuffer(e,t,i){let{[qe]:r,[J]:s,[ti]:n}=e,[o,a,l,h]=n||[null,{},[],null];s=this.templateStatic(s,t);let c=t||e[ar];for(let p=0;p<r.length;p++){let f=r[p];i.buffer+=s[0];for(let m=1;m<s.length;m++){let v=!1;this.dynamicToBuffer(f[m-1],c,i,v),i.buffer+=s[m]}}n!==void 0&&(e[qe].length>0||l.length>0||h)&&(delete e[ti],e[qe]=[],i.streams.add(n))}dynamicToBuffer(e,t,i,r){if(typeof e=="number"){let[s,n]=this.recursiveCIDToString(i.components,e,i.onlyCids);i.buffer+=s,i.streams=new Set([...i.streams,...n])}else pe(e)?this.toOutputBuffer(e,t,i,r,{}):i.buffer+=e}recursiveCIDToString(e,t,i){let r=e[t]||H(`no component for CID ${t}`,e),s={[K]:t},n=i&&!i.has(t);r.newRender=!n,r.magicId=`c${t}-${this.parentViewId()}`;let o=!r.reset,[a,l]=this.recursiveToString(r,e,i,o,s);return delete r.reset,[a,l]}},Or=1,Pe=class{static makeID(){return Or++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let r in this.__callbacks)this[r]=this.__callbacks[r]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(this.el,null,e,t,i)}pushEventTo(e,t,i={},r=function(){}){return this.__view.withinTargets(e,(s,n)=>s.pushHookEvent(this.el,n,t,i,r))}handleEvent(e,t){let i=(r,s)=>s?e:t(r.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(null,e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,(r,s)=>{r.dispatchUploads(s,t,i)})}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},Qe=(e,t,i=[])=>{let{submitter:r,...s}=t,n;if(r&&r.name){let h=document.createElement("input");h.type="hidden";let c=r.getAttribute("form");c&&h.setAttribute("form",c),h.name=r.name,h.value=r.value,r.parentElement.insertBefore(h,r),n=h}let o=new FormData(e),a=[];o.forEach((h,c,p)=>{h instanceof File&&a.push(c)}),a.forEach(h=>o.delete(h));let l=new URLSearchParams;for(let[h,c]of o.entries())(i.length===0||i.indexOf(h)>=0)&&l.append(h,c);r&&n&&r.parentElement.removeChild(n);for(let h in s)l.append(h,s[h]);return l.toString()},wi=class{constructor(e,t,i,r,s){this.isDead=!1,this.liveSocket=t,this.flash=r,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(n){n&&n()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let n=this.href&&this.expandURL(this.href);return{redirect:this.redirect?n:void 0,url:this.redirect?void 0:n||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}})}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(pt)}connectParams(e){let t=this.liveSocket.params(this.el),i=d.all(document,`[${this.binding(Xi)}]`).map(r=>r.src||r.href).filter(r=>typeof r=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._live_referer=e,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(Y)}getStatic(){let e=this.el.getAttribute(ue);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};d.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(zt,Se,$e,Wt,ft),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(Se)}}execAll(e){d.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(zt),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t,i=document,r){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,s=>t(s,e));if(Z(e))d.findComponentNodeList(r||this.el,e).length===0?H(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let s=Array.from(i.querySelectorAll(e));s.length===0&&H(`nothing found matching the phx-target selector "${e}"`),s.forEach(n=>this.liveSocket.owner(n,o=>t(o,n)))}}applyDiff(e,t,i){this.log(e,()=>["",Ke(t)]);let{diff:r,reply:s,events:n,title:o}=vi.extract(t);i({diff:r,reply:s,events:n}),typeof o=="string"&&window.requestAnimationFrame(()=>d.putTitle(o))}onJoin(e){let{rendered:t,container:i,liveview_version:r}=e;if(i){let[s,n]=i;this.el=d.replaceRootContainer(this.el,s,n)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),r!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${r}. To avoid issues, please ensure that your assets use the same version as the server.`),z.dropLocal(this.liveSocket.localStorage,window.location.pathname,Ft),this.applyDiff("mount",t,({diff:s,events:n})=>{this.rendered=new vi(this.id,s);let[o,a]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.maybeRecoverForms(o,()=>{this.onJoinComplete(e,o,a,n)})})}dropPendingRefs(){d.all(document,`[${ne}="${this.id}"][${F}]`,e=>{e.removeAttribute(F),e.removeAttribute(ne)})}onJoinComplete({live_patch:e},t,i,r){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i,r);d.findPhxChildrenInFragment(t,this.id).filter(n=>{let o=n.id&&this.el.querySelector(`[id="${n.id}"]`),a=o&&o.getAttribute(ue);return a&&n.setAttribute(ue,a),o&&o.setAttribute(ae,this.root.id),this.joinChild(n)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,r)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i,r)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,r)])}attachTrueDocEl(){this.el=d.byId(this.id),this.el.setAttribute(ae,this.root.id)}execNewMounted(){let e=this.binding(mt),t=this.binding(gt);d.all(this.el,`[${e}], [${t}]`,i=>{this.ownsElement(i)&&(d.maybeAddPrivateHooks(i,e,t),this.maybeAddNewHook(i))}),d.all(this.el,`[${this.binding(Ee)}], [data-phx-${Ee}]`,i=>{this.ownsElement(i)&&this.maybeAddNewHook(i)}),d.all(this.el,`[${this.binding(Gt)}]`,i=>{this.ownsElement(i)&&this.maybeMounted(i)})}applyJoinPatch(e,t,i,r){this.attachTrueDocEl();let s=new Ze(this,this.el,this.id,t,i,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(r),this.applyPendingUpdates(),e){let{kind:n,to:o}=e;this.liveSocket.historyPatch(o,n)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),r=i&&d.isIgnored(e,this.binding(We));if(i&&!e.isEqualNode(t)&&!(r&&dr(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(Gt)),i=t&&d.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),d.putPrivate(e,"mounted",!0))}maybeAddNewHook(e,t){let i=this.addHook(e);i&&i.__mounted()}performPatch(e,t,i=!1){let r=[],s=!1,n=new Set;return e.after("added",o=>{this.liveSocket.triggerDOM("onNodeAdded",[o]);let a=this.binding(mt),l=this.binding(gt);d.maybeAddPrivateHooks(o,a,l),this.maybeAddNewHook(o),o.getAttribute&&this.maybeMounted(o)}),e.after("phxChildAdded",o=>{d.isPhxSticky(o)?this.liveSocket.joinRootViews():s=!0}),e.before("updated",(o,a)=>{this.triggerBeforeUpdateHook(o,a)&&n.add(o.id)}),e.after("updated",o=>{n.has(o.id)&&this.getHook(o).__updated()}),e.after("discarded",o=>{o.nodeType===Node.ELEMENT_NODE&&r.push(o)}),e.after("transitionsDiscarded",o=>this.afterElementsRemoved(o,t)),e.perform(i),this.afterElementsRemoved(r,t),s}afterElementsRemoved(e,t){let i=[];e.forEach(r=>{let s=d.all(r,`[${K}]`),n=d.all(r,`[${this.binding(Ee)}]`);s.concat(r).forEach(o=>{let a=this.componentID(o);Z(a)&&i.indexOf(a)===-1&&i.push(a)}),n.concat(r).forEach(o=>{let a=this.getHook(o);a&&this.destroyHook(a)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){d.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}maybeRecoverForms(e,t){let i=this.binding("change"),r=this.root.formsForRecovery,s=document.createElement("template");s.innerHTML=e;let n=s.content.firstElementChild;n.id=this.id,n.setAttribute(ae,this.root.id),n.setAttribute(Y,this.getSession()),n.setAttribute(ue,this.getStatic()),n.setAttribute(oe,this.parent?this.parent.id:null);let o=d.all(s.content,"form").filter(a=>a.id&&r[a.id]).filter(a=>!this.pendingForms.has(a.id)).filter(a=>r[a.id].getAttribute(i)===a.getAttribute(i)).map(a=>[r[a.id],a]);if(o.length===0)return t();o.forEach(([a,l],h)=>{this.pendingForms.add(l.id),this.pushFormRecovery(a,l,s.content,()=>{this.pendingForms.delete(l.id),h===o.length-1&&t()})})}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(oe)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new wi(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{d.findExistingParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):ii(e)||this.liveSocket.time("full patch complete",()=>{let[r,s]=this.renderContainer(e,"update"),n=new Ze(this,this.el,this.id,r,s,null);i=this.performPatch(n,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,r=e?this.rendered.componentCIDs(e):null,[s,n]=this.rendered.toString(r);return[`<${i}>${s}</${i}>`,n]})}componentPatch(e,t){if(ii(e))return!1;let[i,r]=this.rendered.componentToString(t),s=new Ze(this,this.el,this.id,i,r,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[Pe.elementID(e)]}addHook(e){if(Pe.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Ee}`)||e.getAttribute(this.binding(Ee));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||H(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let r=new Pe(this,e,i);return this.viewHooks[Pe.elementID(r.el)]=r,r}else t!==null&&H(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[Pe.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let i in t)e(this.getChildById(i))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:i,flash:r}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,r)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="reload"){this.log("error",()=>[`failed mount with ${e.status}. Falling back to page request`,e]),this.isMain()&&this.onRedirect({to:this.href});return}else if(e.reason==="unauthorized"||e.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.isMain()&&this.onRedirect({to:this.href});return}if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.displayError([Se,$e,ft]),this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(rr)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([Se,$e,ft]):this.displayError([Se,$e,Wt]))}displayError(e){this.isMain()&&d.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...e),this.execAll(this.binding("disconnected"))}pushWithReply(e,t,i,r=function(){}){if(!this.isConnected())return;let[s,[n],o]=e?e():[null,[],{}],a=function(){};return(o.page_loading||n&&n.getAttribute(this.binding(Jt))!==null)&&(a=this.liveSocket.withPageLoading({kind:"element",target:n})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,nr).receive("ok",l=>{let h=c=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),a(),r(l,c)};l.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",l.diff,({diff:c,reply:p,events:f})=>{s!==null&&this.undoRefs(s),this.update(c,f),h(p)})}):(s!==null&&this.undoRefs(s),h(null))}))}undoRefs(e,t){t=t?new Set(t):null,!!this.isConnected()&&d.all(document,`[${ne}="${this.id}"][${F}="${e}"]`,i=>{if(t&&!t.has(i))return;i.dispatchEvent(new CustomEvent("phx:unlock",{bubbles:!0,cancelable:!1}));let r=i.getAttribute(fe),s=i.getAttribute(wt);i.removeAttribute(F),i.removeAttribute(ne),s!==null&&(i.readOnly=s==="true",i.removeAttribute(wt)),r!==null&&(i.disabled=r==="true",i.removeAttribute(fe)),Wi.forEach(a=>d.removeClass(i,a));let n=i.getAttribute(ze);n!==null&&(i.innerText=n,i.removeAttribute(ze));let o=d.private(i,F);if(o){let a=this.triggerBeforeUpdateHook(i,o);Ze.patchEl(i,o,this.liveSocket.getActiveElement()),a&&a.__updated(),d.deletePrivate(i,F)}})}putRef(e,t,i={}){let r=this.ref++,s=this.binding(bt);i.loading&&(e=e.concat(d.all(document,i.loading)));for(let n of e){if(n.setAttribute(F,r),n.setAttribute(ne,this.el.id),i.submitter&&!(n===i.submitter||n===i.form))continue;n.classList.add(`phx-${t}-loading`),n.dispatchEvent(new CustomEvent(`phx:${t}-loading`,{bubbles:!0,cancelable:!1}));let o=n.getAttribute(s);o!==null&&(n.getAttribute(ze)||n.setAttribute(ze,n.innerText),o!==""&&(n.innerText=o),n.setAttribute(fe,n.getAttribute(fe)||n.disabled),n.setAttribute("disabled",""))}return[r,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(K);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(Z(t))return t;let r=i.target||e.getAttribute(this.binding("target"));return Z(r)?parseInt(r):t&&(r!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return Z(e)?e:e?te(e.closest(`[${K}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,r,s){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",i,r]),!1;let[n,o,a]=this.putRef([e],"hook");return this.pushWithReply(()=>[n,o,a],"event",{type:"hook",event:i,value:r,cid:this.closestComponentID(t)},(l,h)=>s(h,n)),n}extractMeta(e,t,i){let r=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let n=e.attributes[s].name;n.startsWith(r)&&(t[n.replace(r,"")]=e.getAttribute(n))}if(e.value!==void 0&&!(e instanceof HTMLFormElement)&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Xt.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,r,s,n={},o){this.pushWithReply(()=>this.putRef([t],e,n),"event",{type:e,event:r,value:this.extractMeta(t,s,n.value),cid:this.targetComponentID(t,i,n)},(a,l)=>o&&o(l))}pushFileProgress(e,t,i,r=function(){}){this.liveSocket.withinOwners(e.form,(s,n)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(tr)),ref:e.getAttribute(G),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,n)},r)})}pushInput(e,t,i,r,s,n){let o,a=Z(i)?i:this.targetComponentID(e.form,t,s),l=()=>this.putRef([e,e.form],"change",s),h,c=this.extractMeta(e.form);e instanceof HTMLButtonElement&&(c.submitter=e),e.getAttribute(this.binding("change"))?h=Qe(e.form,{_target:s._target,...c},[e.name]):h=Qe(e.form,{_target:s._target,...c}),d.isUploadInput(e)&&e.files&&e.files.length>0&&I.trackFiles(e,Array.from(e.files)),o=I.serializeUploads(e);let p={type:"form",event:r,value:h,uploads:o,cid:a};this.pushWithReply(l,"event",p,f=>{if(d.showError(e,this.liveSocket.binding(Ve),this.liveSocket.binding(je)),d.isUploadInput(e)&&d.isAutoUpload(e)){if(I.filesAwaitingPreflight(e).length>0){let[m,v]=l();this.undoRefs(m,[e.form]),this.uploadFiles(e.form,t,m,a,b=>{n&&n(f),this.triggerAwaitingSubmit(e.form),this.undoRefs(m)})}}else n&&n(f)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,r,s,n]=t;this.cancelSubmit(e),n()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,r,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,r){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,r])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,r])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}disableForm(e,t={}){let i=c=>!(Ce(c,`${this.binding(We)}=ignore`,c.form)||Ce(c,"data-phx-update=ignore",c.form)),r=c=>c.hasAttribute(this.binding(bt)),s=c=>c.tagName=="BUTTON",n=c=>["INPUT","TEXTAREA","SELECT"].includes(c.tagName),o=Array.from(e.elements),a=o.filter(r),l=o.filter(s).filter(i),h=o.filter(n).filter(i);return l.forEach(c=>{c.setAttribute(fe,c.disabled),c.disabled=!0}),h.forEach(c=>{c.setAttribute(wt,c.readOnly),c.readOnly=!0,c.files&&(c.setAttribute(fe,c.disabled),c.disabled=!0)}),e.setAttribute(this.binding(Jt),""),this.putRef([e].concat(a).concat(l).concat(h),"submit",t)}pushFormSubmit(e,t,i,r,s,n){let o=()=>this.disableForm(e,{...s,form:e,submitter:r}),a=this.targetComponentID(e,t);if(I.hasUploadsInProgress(e)){let[l,h]=o(),c=()=>this.pushFormSubmit(e,t,i,r,s,n);return this.scheduleSubmit(e,l,s,c)}else if(I.inputsAwaitingPreflight(e).length>0){let[l,h]=o(),c=()=>[l,h,s];this.uploadFiles(e,t,l,a,p=>{if(I.inputsAwaitingPreflight(e).length>0)return this.undoRefs(l);let f=this.extractMeta(e),m=Qe(e,{submitter:r,...f});this.pushWithReply(c,"event",{type:"form",event:i,value:m,cid:a},n)})}else if(!(e.hasAttribute(F)&&e.classList.contains("phx-submit-loading"))){let l=this.extractMeta(e),h=Qe(e,{submitter:r,...l});this.pushWithReply(o,"event",{type:"form",event:i,value:h,cid:a},n)}}uploadFiles(e,t,i,r,s){let n=this.joinCount,o=I.activeFileInputs(e),a=o.length;o.forEach(l=>{let h=new I(l,this,()=>{a--,a===0&&s()}),c=h.entries().map(f=>f.toPreflightPayload());if(c.length===0){a--;return}let p={ref:l.getAttribute(G),entries:c,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",p]),this.pushWithReply(null,"allow_upload",p,f=>{if(this.log("upload",()=>["got preflight response",f]),h.entries().forEach(m=>{f.entries&&!f.entries[m.ref]&&this.handleFailedEntryPreflight(m.ref,"failed preflight",h)}),f.error||Object.keys(f.entries).length===0)this.undoRefs(i),(f.error||[]).map(([v,b])=>{this.handleFailedEntryPreflight(v,b,h)});else{let m=v=>{this.channel.onError(()=>{this.joinCount===n&&v()})};h.initAdapterUpload(f,m,this.liveSocket)}})})}handleFailedEntryPreflight(e,t,i){if(i.isAutoUpload()){let r=i.entries().find(s=>s.ref===e.toString());r&&r.cancel()}else i.entries().map(r=>r.cancel());this.log("upload",()=>[`error for entry ${e}`,t])}dispatchUploads(e,t,i){let r=this.targetCtxElement(e)||this.el,s=d.findUploadInputs(r).filter(n=>n.name===t);s.length===0?H(`no live file inputs found matching the name "${t}"`):s.length>1?H(`duplicate live file inputs found matching the name "${t}"`):d.dispatchEvent(s[0],Nt,{detail:{files:i}})}targetCtxElement(e){if(Z(e)){let[t]=d.findComponentNodeList(this.el,e);return t}else return e||null}pushFormRecovery(e,t,i,r){let s=this.binding("change"),n=t.getAttribute(this.binding("target"))||t,o=t.getAttribute(this.binding(Kt))||t.getAttribute(this.binding("change")),a=Array.from(e.elements).filter(c=>d.isFormInput(c)&&c.name&&!c.hasAttribute(s));if(a.length===0)return;a.forEach(c=>c.hasAttribute(G)&&I.clearFiles(c));let l=a.find(c=>c.type!=="hidden")||a[0],h=0;this.withinTargets(n,(c,p)=>{let f=this.targetComponentID(t,p);h++,c.pushInput(l,p,f,o,{_target:l.name},()=>{h--,h===0&&r()})},i,i)}pushLinkPatch(e,t,i){let r=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,n=()=>this.liveSocket.redirect(window.location.href),o=e.startsWith("/")?`${location.protocol}//${location.host}${e}`:e,a=this.pushWithReply(s,"live_patch",{url:o},l=>{this.liveSocket.requestDOMUpdate(()=>{l.link_redirect?this.liveSocket.replaceMain(e,null,i,r):(this.liveSocket.commitPendingLink(r)&&(this.href=e),this.applyPendingUpdates(),i&&i(r))})});a?a.receive("timeout",n):n()}getFormsForRecovery(){if(this.joinCount===0)return{};let e=this.binding("change");return d.all(this.el,`form[${e}]`).filter(t=>t.id).filter(t=>t.elements.length>0).filter(t=>t.getAttribute(this.binding(Kt))!=="ignore").map(t=>t.cloneNode(!0)).reduce((t,i)=>(t[i.id]=i,t),{})}maybePushComponentsDestroyed(e){let t=e.filter(i=>d.findComponentNodeList(this.el,i).length===0);t.length>0&&(t.forEach(i=>this.rendered.resetRender(i)),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.liveSocket.requestDOMUpdate(()=>{let i=t.filter(r=>d.findComponentNodeList(this.el,r).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},r=>{this.rendered.pruneCIDs(r.cids)})})}))}ownsElement(e){let t=e.closest(de);return e.getAttribute(oe)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,i,r,s={}){d.putPrivate(e,Je,!0);let n=this.liveSocket.binding(Ve),o=this.liveSocket.binding(je),a=Array.from(e.elements);a.forEach(l=>d.putPrivate(l,Je,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,r,s,()=>{a.forEach(l=>d.showError(l,n,o)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},bi=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||sr,this.opts=i,this.params=Te(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(Ke(or),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Ke(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||ir,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||Vi,this.reloadJitterMin=i.reloadJitterMin||ji,this.reloadJitterMax=i.reloadJitterMax||Ji,this.failsafeJitter=i.failsafeJitter||zi,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.serverCloseRef=null,this.domCallbacks=Object.assign({onPatchStart:Te(),onPatchEnd:Te(),onNodeAdded:Te(),onBeforeElUpdated:Te()},i.dom||{}),this.transitions=new Mr,window.addEventListener("pagehide",r=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"0.20.15"}isProfileEnabled(){return this.sessionStorage.getItem(St)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(Xe)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(Xe)==="false"}enableDebug(){this.sessionStorage.setItem(Xe,"true")}enableProfiling(){this.sessionStorage.setItem(St,"true")}disableDebug(){this.sessionStorage.setItem(Xe,"false")}disableProfiling(){this.sessionStorage.removeItem(St)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(Et,e)}disableLatencySim(){this.sessionStorage.removeItem(Et)}getLatencySim(){let e=this.sessionStorage.getItem(Et);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,r=>L.exec(i,t,r,e))}execJSHookPush(e,t,i,r){this.withinOwners(e,s=>{L.exec("hook",t,s,e,["push",{data:i,callback:r}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[r,s]=i();this.viewLogger(e,t,r,s)}else if(this.isDebugEnabled()){let[r,s]=i();cr(e,t,r,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,r=>{let s=this.getLatencySim();s?setTimeout(()=>i(r),s):i(r)})}wrapPush(e,t,i){let r=this.getLatencySim(),s=e.joinCount;if(!r)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();let n={receives:[],receive(o,a){this.receives.push([o,a])}};return setTimeout(()=>{e.isDestroyed()||n.receives.reduce((o,[a,l])=>o.receive(a,l),i())},r),n}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,r=this.reloadJitterMax,s=Math.floor(Math.random()*(r-i+1))+i,n=z.updateLocal(this.localStorage,window.location.pathname,Ft,0,o=>o+1);n>this.maxReloads&&(s=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${n} consecutive reloads`]),n>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?wr[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinDeadView(){let e=document.body;if(e&&!this.isPhxView(e)&&!this.isPhxView(document.firstElementChild)){let t=this.newRootView(e);t.setHref(this.getHref()),t.joinDead(),this.main||(this.main=t),window.requestAnimationFrame(()=>t.execNewMounted())}}joinRootViews(){let e=!1;return d.all(document,`${de}:not([${oe}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.hasAttribute(pt)&&(this.main=i)}e=!0}),e}redirect(e,t){this.unload(),z.redirect(e,t)}replaceMain(e,t,i=null,r=this.setPendingLink(e)){let s=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let n=d.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(n,t,s),this.main.setRedirect(e),this.transitionRemoves(null,!0),this.main.join((o,a)=>{o===1&&this.commitPendingLink(r)&&this.requestDOMUpdate(()=>{d.findPhxSticky(document).forEach(l=>n.appendChild(l)),this.outgoingMainEl.replaceWith(n),this.outgoingMainEl=null,i&&i(r),a()})})}transitionRemoves(e,t){let i=this.binding("remove");if(e=e||d.all(document,`[${i}]`),t){let r=d.findPhxSticky(document)||[];e=e.filter(s=>!d.isChildOfAny(s,r))}e.forEach(r=>{this.execJS(r,r.getAttribute(i),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(Y)!==null}newRootView(e,t,i){let r=new wi(e,this,null,t,i);return this.roots[r.id]=r,r}owner(e,t){let i=te(e.closest(de),r=>this.getViewByEl(r))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(ae);return te(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(ae));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:e}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(t=>{if(t&&t.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),e||this.bindNav(),this.bindClicks(),e||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,i,r,s,n,o)=>{let a=s.getAttribute(this.binding(er)),l=t.key&&t.key.toLowerCase();if(a&&a.toLowerCase()!==l)return;let h={key:t.key,...this.eventMeta(i,t,s)};L.exec(i,n,r,s,["push",{data:h}])}),this.bind({blur:"focusout",focus:"focusin"},(t,i,r,s,n,o)=>{if(!o){let a={key:t.key,...this.eventMeta(i,t,s)};L.exec(i,n,r,s,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(t,i,r,s,n,o)=>{if(o==="window"){let a=this.eventMeta(i,t,s);L.exec(i,n,r,s,["push",{data:a}])}}),window.addEventListener("dragover",t=>t.preventDefault()),window.addEventListener("drop",t=>{t.preventDefault();let i=te(Ce(t.target,this.binding(Bt)),n=>n.getAttribute(this.binding(Bt))),r=i&&document.getElementById(i),s=Array.from(t.dataTransfer.files||[]);!r||r.disabled||s.length===0||!(r.files instanceof FileList)||(I.trackFiles(r,s,t.dataTransfer),r.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Nt,t=>{let i=t.target;if(!d.isUploadInput(i))return;let r=Array.from(t.detail.files||[]).filter(s=>s instanceof File||s instanceof Blob);I.trackFiles(i,r),i.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let r=this.metadataCallbacks[e];return r?r(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let r=e[i];this.on(r,s=>{let n=this.binding(i),o=this.binding(`window-${i}`),a=s.target.getAttribute&&s.target.getAttribute(n);a?this.debounce(s.target,s,r,()=>{this.withinOwners(s.target,l=>{t(s,i,l,s.target,a,null)})}):d.all(document,`[${o}]`,l=>{let h=l.getAttribute(o);this.debounce(l,s,r,()=>{this.withinOwners(l,c=>{t(s,i,c,l,h,"window")})})})})}}bindClicks(){window.addEventListener("mousedown",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click")}bindClick(e,t){let i=this.binding(t);window.addEventListener(e,r=>{let s=null;r.detail===0&&(this.clickStartedAtTarget=r.target);let n=this.clickStartedAtTarget||r.target;s=Ce(n,i),this.dispatchClickAway(r,n),this.clickStartedAtTarget=null;let o=s&&s.getAttribute(i);if(!o){d.isNewPageClick(r,window.location)&&this.unload();return}s.getAttribute("href")==="#"&&r.preventDefault(),!s.hasAttribute(F)&&this.debounce(s,r,"click",()=>{this.withinOwners(s,a=>{L.exec("click",o,a,s,["push",{data:this.eventMeta("click",r,s)}])})})},!1)}dispatchClickAway(e,t){let i=this.binding("click-away");d.all(document,`[${i}]`,r=>{r.isSameNode(t)||r.contains(t)||this.withinOwners(r,s=>{let n=r.getAttribute(i);L.isVisible(r)&&L.isInViewport(r)&&L.exec("click",n,s,r,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!z.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{z.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:r,root:s,scroll:n}=t.state||{},o=window.location.href;d.dispatchEvent(window,"phx:navigate",{detail:{href:o,patch:i==="patch",pop:!0}}),this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&r===this.main.id?this.main.pushLinkPatch(o,null,()=>{this.maybeScroll(n)}):this.replaceMain(o,null,()=>{s&&this.replaceRootHistory(),this.maybeScroll(n)})})},!1),window.addEventListener("click",t=>{let i=Ce(t.target,ct),r=i&&i.getAttribute(ct);if(!r||!this.isConnected()||!this.main||d.wantsNewTab(t))return;let s=i.href instanceof SVGAnimatedString?i.href.baseVal:i.href,n=i.getAttribute(qi);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==s&&this.requestDOMUpdate(()=>{if(r==="patch")this.pushHistoryPatch(s,n,i);else if(r==="redirect")this.historyRedirect(s,n);else throw new Error(`expected ${ct} to be "patch" or "redirect", got: ${r}`);let o=i.getAttribute(this.binding("click"));o&&this.requestDOMUpdate(()=>this.execJS(i,o,"click"))})},!1)}maybeScroll(e){typeof e=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,e)})}dispatchEvent(e,t={}){d.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){d.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>d.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){if(!this.isConnected()||!this.main.isMain())return z.redirect(e);this.withPageLoading({to:e,kind:"patch"},r=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),r()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(z.pushState(t,{type:"patch",id:this.main.id},e),d.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:e,pop:!1}}),this.registerNewLocation(window.location))}historyRedirect(e,t,i){if(!this.isConnected()||!this.main.isMain())return z.redirect(e,i);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:s,host:n}=window.location;e=`${s}//${n}${e}`}let r=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,n=>{n===this.linkRef&&(z.pushState(t,{type:"redirect",id:this.main.id,scroll:r},e),d.dispatchEvent(window,"phx:navigate",{detail:{href:e,patch:!1,pop:!1}}),this.registerNewLocation(window.location)),s()})})}replaceRootHistory(){z.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=Ke(e),!0)}bindForms(){let e=0,t=!1;this.on("submit",i=>{let r=i.target.getAttribute(this.binding("submit")),s=i.target.getAttribute(this.binding("change"));!t&&s&&!r&&(t=!0,i.preventDefault(),this.withinOwners(i.target,n=>{n.disableForm(i.target),window.requestAnimationFrame(()=>{d.isUnloadableFormSubmit(i)&&this.unload(),i.target.submit()})}))},!0),this.on("submit",i=>{let r=i.target.getAttribute(this.binding("submit"));if(!r){d.isUnloadableFormSubmit(i)&&this.unload();return}i.preventDefault(),i.target.disabled=!0,this.withinOwners(i.target,s=>{L.exec("submit",r,s,i.target,["push",{submitter:i.submitter}])})},!1);for(let i of["change","input"])this.on(i,r=>{let s=this.binding("change"),n=r.target,o=n.getAttribute(s),a=n.form&&n.form.getAttribute(s),l=o||a;if(!l||n.type==="number"&&n.validity&&n.validity.badInput)return;let h=o?n:n.form,c=e;e++;let{at:p,type:f}=d.private(n,"prev-iteration")||{};p===c-1&&i==="change"&&f==="input"||(d.putPrivate(n,"prev-iteration",{at:c,type:i}),this.debounce(n,r,i,()=>{this.withinOwners(h,m=>{d.putPrivate(n,vt,!0),d.isTextualInput(n)||this.setActiveElement(n),L.exec("change",l,m,n,["push",{_target:r.target.name,dispatcher:h}])})}))},!1);this.on("reset",i=>{let r=i.target;d.resetForm(r,this.binding(Ve),this.binding(je));let s=Array.from(r.elements).find(n=>n.type==="reset");s&&window.requestAnimationFrame(()=>{s.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(e,t,i,r){if(i==="blur"||i==="focusout")return r();let s=this.binding(Zi),n=this.binding(Qi),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(e,l=>{let h=()=>!l.isDestroyed()&&document.body.contains(e);d.debounce(e,t,s,o,n,a,h,()=>{r()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},Mr=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(e=>{clearTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let r=setTimeout(()=>{this.transitions.delete(r),i(),this.flushPendingOps()},e);this.transitions.add(r)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let e=this.pendingOps.shift();e&&(e(),this.flushPendingOps())}};function yi(e){for(var t=e.length,i=0,r=0;r<t;){var s=e.charCodeAt(r++);if((s&4294967168)==0){i++;continue}else if((s&4294965248)==0)i+=2;else{if(s>=55296&&s<=56319&&r<t){var n=e.charCodeAt(r);(n&64512)==56320&&(++r,s=((s&1023)<<10)+(n&1023)+65536)}(s&4294901760)==0?i+=3:i+=4}}return i}function Hr(e,t,i){for(var r=e.length,s=i,n=0;n<r;){var o=e.charCodeAt(n++);if((o&4294967168)==0){t[s++]=o;continue}else if((o&4294965248)==0)t[s++]=o>>6&31|192;else{if(o>=55296&&o<=56319&&n<r){var a=e.charCodeAt(n);(a&64512)==56320&&(++n,o=((o&1023)<<10)+(a&1023)+65536)}(o&4294901760)==0?(t[s++]=o>>12&15|224,t[s++]=o>>6&63|128):(t[s++]=o>>18&7|240,t[s++]=o>>12&63|128,t[s++]=o>>6&63|128)}t[s++]=o&63|128}}var Fr=new TextEncoder,Nr=50;function Br(e,t,i){Fr.encodeInto(e,t.subarray(i))}function xi(e,t,i){e.length>Nr?Br(e,t,i):Hr(e,t,i)}var $r=4096;function _t(e,t,i){for(var r=t,s=r+i,n=[],o="";r<s;){var a=e[r++];if((a&128)==0)n.push(a);else if((a&224)==192){var l=e[r++]&63;n.push((a&31)<<6|l)}else if((a&240)==224){var l=e[r++]&63,h=e[r++]&63;n.push((a&31)<<12|l<<6|h)}else if((a&248)==240){var l=e[r++]&63,h=e[r++]&63,c=e[r++]&63,p=(a&7)<<18|l<<12|h<<6|c;p>65535&&(p-=65536,n.push(p>>>10&1023|55296),p=56320|p&1023),n.push(p)}else n.push(a);n.length>=$r&&(o+=String.fromCharCode.apply(String,n),n.length=0)}return n.length>0&&(o+=String.fromCharCode.apply(String,n)),o}var Vr=new TextDecoder,jr=200;function Jr(e,t,i){var r=e.subarray(t,t+i);return Vr.decode(r)}function Si(e,t,i){return i>jr?Jr(e,t,i):_t(e,t,i)}var Ie=function(){function e(t,i){this.type=t,this.data=i}return e}();var zr=function(){var e=function(t,i){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,s){r.__proto__=s}||function(r,s){for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(r[n]=s[n])},e(t,i)};return function(t,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");e(t,i);function r(){this.constructor=t}t.prototype=i===null?Object.create(i):(r.prototype=i.prototype,new r)}}(),N=function(e){zr(t,e);function t(i){var r=e.call(this,i)||this,s=Object.create(t.prototype);return Object.setPrototypeOf(r,s),Object.defineProperty(r,"name",{configurable:!0,enumerable:!1,value:t.name}),r}return t}(Error);var ge=4294967295;function Ei(e,t,i){var r=i/4294967296,s=i;e.setUint32(t,r),e.setUint32(t+4,s)}function et(e,t,i){var r=Math.floor(i/4294967296),s=i;e.setUint32(t,r),e.setUint32(t+4,s)}function tt(e,t){var i=e.getInt32(t),r=e.getUint32(t+4);return i*4294967296+r}function Ai(e,t){var i=e.getUint32(t),r=e.getUint32(t+4);return i*4294967296+r}var Wr=-1,Xr=4294967296-1,qr=17179869184-1;function Kr(e){var t=e.sec,i=e.nsec;if(t>=0&&i>=0&&t<=qr)if(i===0&&t<=Xr){var r=new Uint8Array(4),s=new DataView(r.buffer);return s.setUint32(0,t),r}else{var n=t/4294967296,o=t&4294967295,r=new Uint8Array(8),s=new DataView(r.buffer);return s.setUint32(0,i<<2|n&3),s.setUint32(4,o),r}else{var r=new Uint8Array(12),s=new DataView(r.buffer);return s.setUint32(0,i),et(s,4,t),r}}function Gr(e){var t=e.getTime(),i=Math.floor(t/1e3),r=(t-i*1e3)*1e6,s=Math.floor(r/1e9);return{sec:i+s,nsec:r-s*1e9}}function Yr(e){if(e instanceof Date){var t=Gr(e);return Kr(t)}else return null}function Zr(e){var t=new DataView(e.buffer,e.byteOffset,e.byteLength);switch(e.byteLength){case 4:{var i=t.getUint32(0),r=0;return{sec:i,nsec:r}}case 8:{var s=t.getUint32(0),n=t.getUint32(4),i=(s&3)*4294967296+n,r=s>>>2;return{sec:i,nsec:r}}case 12:{var i=tt(t,4),r=t.getUint32(0);return{sec:i,nsec:r}}default:throw new N("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(e.length))}}function Qr(e){var t=Zr(e);return new Date(t.sec*1e3+t.nsec/1e6)}var ki={type:Wr,encode:Yr,decode:Qr};var it=function(){function e(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(ki)}return e.prototype.register=function(t){var i=t.type,r=t.encode,s=t.decode;if(i>=0)this.encoders[i]=r,this.decoders[i]=s;else{var n=1+i;this.builtInEncoders[n]=r,this.builtInDecoders[n]=s}},e.prototype.tryToEncode=function(t,i){for(var r=0;r<this.builtInEncoders.length;r++){var s=this.builtInEncoders[r];if(s!=null){var n=s(t,i);if(n!=null){var o=-1-r;return new Ie(o,n)}}}for(var r=0;r<this.encoders.length;r++){var s=this.encoders[r];if(s!=null){var n=s(t,i);if(n!=null){var o=r;return new Ie(o,n)}}}return t instanceof Ie?t:null},e.prototype.decode=function(t,i,r){var s=i<0?this.builtInDecoders[-1-i]:this.decoders[i];return s?s(t,i,r):new Ie(i,t)},e.defaultCodec=new e,e}();function ve(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?new Uint8Array(e):Uint8Array.from(e)}function Ti(e){if(e instanceof ArrayBuffer)return new DataView(e);var t=ve(e);return new DataView(t.buffer,t.byteOffset,t.byteLength)}var es=100,ts=2048,Rt=function(){function e(t){var i,r,s,n,o,a,l,h;this.extensionCodec=(i=t==null?void 0:t.extensionCodec)!==null&&i!==void 0?i:it.defaultCodec,this.context=t==null?void 0:t.context,this.useBigInt64=(r=t==null?void 0:t.useBigInt64)!==null&&r!==void 0?r:!1,this.maxDepth=(s=t==null?void 0:t.maxDepth)!==null&&s!==void 0?s:es,this.initialBufferSize=(n=t==null?void 0:t.initialBufferSize)!==null&&n!==void 0?n:ts,this.sortKeys=(o=t==null?void 0:t.sortKeys)!==null&&o!==void 0?o:!1,this.forceFloat32=(a=t==null?void 0:t.forceFloat32)!==null&&a!==void 0?a:!1,this.ignoreUndefined=(l=t==null?void 0:t.ignoreUndefined)!==null&&l!==void 0?l:!1,this.forceIntegerToFloat=(h=t==null?void 0:t.forceIntegerToFloat)!==null&&h!==void 0?h:!1,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return e.prototype.reinitializeState=function(){this.pos=0},e.prototype.encodeSharedRef=function(t){return this.reinitializeState(),this.doEncode(t,1),this.bytes.subarray(0,this.pos)},e.prototype.encode=function(t){return this.reinitializeState(),this.doEncode(t,1),this.bytes.slice(0,this.pos)},e.prototype.doEncode=function(t,i){if(i>this.maxDepth)throw new Error("Too deep objects in depth ".concat(i));t==null?this.encodeNil():typeof t=="boolean"?this.encodeBoolean(t):typeof t=="number"?this.forceIntegerToFloat?this.encodeNumberAsFloat(t):this.encodeNumber(t):typeof t=="string"?this.encodeString(t):this.useBigInt64&&typeof t=="bigint"?this.encodeBigInt64(t):this.encodeObject(t,i)},e.prototype.ensureBufferSizeToWrite=function(t){var i=this.pos+t;this.view.byteLength<i&&this.resizeBuffer(i*2)},e.prototype.resizeBuffer=function(t){var i=new ArrayBuffer(t),r=new Uint8Array(i),s=new DataView(i);r.set(this.bytes),this.view=s,this.bytes=r},e.prototype.encodeNil=function(){this.writeU8(192)},e.prototype.encodeBoolean=function(t){t===!1?this.writeU8(194):this.writeU8(195)},e.prototype.encodeNumber=function(t){!this.forceIntegerToFloat&&Number.isSafeInteger(t)?t>=0?t<128?this.writeU8(t):t<256?(this.writeU8(204),this.writeU8(t)):t<65536?(this.writeU8(205),this.writeU16(t)):t<4294967296?(this.writeU8(206),this.writeU32(t)):this.useBigInt64?this.encodeNumberAsFloat(t):(this.writeU8(207),this.writeU64(t)):t>=-32?this.writeU8(224|t+32):t>=-128?(this.writeU8(208),this.writeI8(t)):t>=-32768?(this.writeU8(209),this.writeI16(t)):t>=-2147483648?(this.writeU8(210),this.writeI32(t)):this.useBigInt64?this.encodeNumberAsFloat(t):(this.writeU8(211),this.writeI64(t)):this.encodeNumberAsFloat(t)},e.prototype.encodeNumberAsFloat=function(t){this.forceFloat32?(this.writeU8(202),this.writeF32(t)):(this.writeU8(203),this.writeF64(t))},e.prototype.encodeBigInt64=function(t){t>=BigInt(0)?(this.writeU8(207),this.writeBigUint64(t)):(this.writeU8(211),this.writeBigInt64(t))},e.prototype.writeStringHeader=function(t){if(t<32)this.writeU8(160+t);else if(t<256)this.writeU8(217),this.writeU8(t);else if(t<65536)this.writeU8(218),this.writeU16(t);else if(t<4294967296)this.writeU8(219),this.writeU32(t);else throw new Error("Too long string: ".concat(t," bytes in UTF-8"))},e.prototype.encodeString=function(t){var i=1+4,r=yi(t);this.ensureBufferSizeToWrite(i+r),this.writeStringHeader(r),xi(t,this.bytes,this.pos),this.pos+=r},e.prototype.encodeObject=function(t,i){var r=this.extensionCodec.tryToEncode(t,this.context);if(r!=null)this.encodeExtension(r);else if(Array.isArray(t))this.encodeArray(t,i);else if(ArrayBuffer.isView(t))this.encodeBinary(t);else if(typeof t=="object")this.encodeMap(t,i);else throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(t)))},e.prototype.encodeBinary=function(t){var i=t.byteLength;if(i<256)this.writeU8(196),this.writeU8(i);else if(i<65536)this.writeU8(197),this.writeU16(i);else if(i<4294967296)this.writeU8(198),this.writeU32(i);else throw new Error("Too large binary: ".concat(i));var r=ve(t);this.writeU8a(r)},e.prototype.encodeArray=function(t,i){var r=t.length;if(r<16)this.writeU8(144+r);else if(r<65536)this.writeU8(220),this.writeU16(r);else if(r<4294967296)this.writeU8(221),this.writeU32(r);else throw new Error("Too large array: ".concat(r));for(var s=0,n=t;s<n.length;s++){var o=n[s];this.doEncode(o,i+1)}},e.prototype.countWithoutUndefined=function(t,i){for(var r=0,s=0,n=i;s<n.length;s++){var o=n[s];t[o]!==void 0&&r++}return r},e.prototype.encodeMap=function(t,i){var r=Object.keys(t);this.sortKeys&&r.sort();var s=this.ignoreUndefined?this.countWithoutUndefined(t,r):r.length;if(s<16)this.writeU8(128+s);else if(s<65536)this.writeU8(222),this.writeU16(s);else if(s<4294967296)this.writeU8(223),this.writeU32(s);else throw new Error("Too large map object: ".concat(s));for(var n=0,o=r;n<o.length;n++){var a=o[n],l=t[a];this.ignoreUndefined&&l===void 0||(this.encodeString(a),this.doEncode(l,i+1))}},e.prototype.encodeExtension=function(t){var i=t.data.length;if(i===1)this.writeU8(212);else if(i===2)this.writeU8(213);else if(i===4)this.writeU8(214);else if(i===8)this.writeU8(215);else if(i===16)this.writeU8(216);else if(i<256)this.writeU8(199),this.writeU8(i);else if(i<65536)this.writeU8(200),this.writeU16(i);else if(i<4294967296)this.writeU8(201),this.writeU32(i);else throw new Error("Too large extension object: ".concat(i));this.writeI8(t.type),this.writeU8a(t.data)},e.prototype.writeU8=function(t){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,t),this.pos++},e.prototype.writeU8a=function(t){var i=t.length;this.ensureBufferSizeToWrite(i),this.bytes.set(t,this.pos),this.pos+=i},e.prototype.writeI8=function(t){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,t),this.pos++},e.prototype.writeU16=function(t){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,t),this.pos+=2},e.prototype.writeI16=function(t){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,t),this.pos+=2},e.prototype.writeU32=function(t){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,t),this.pos+=4},e.prototype.writeI32=function(t){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,t),this.pos+=4},e.prototype.writeF32=function(t){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,t),this.pos+=4},e.prototype.writeF64=function(t){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,t),this.pos+=8},e.prototype.writeU64=function(t){this.ensureBufferSizeToWrite(8),Ei(this.view,this.pos,t),this.pos+=8},e.prototype.writeI64=function(t){this.ensureBufferSizeToWrite(8),et(this.view,this.pos,t),this.pos+=8},e.prototype.writeBigUint64=function(t){this.ensureBufferSizeToWrite(8),this.view.setBigUint64(this.pos,t),this.pos+=8},e.prototype.writeBigInt64=function(t){this.ensureBufferSizeToWrite(8),this.view.setBigInt64(this.pos,t),this.pos+=8},e}();function rt(e){return"".concat(e<0?"-":"","0x").concat(Math.abs(e).toString(16).padStart(2,"0"))}var is=16,rs=16,Ci=function(){function e(t,i){t===void 0&&(t=is),i===void 0&&(i=rs),this.maxKeyLength=t,this.maxLengthPerKey=i,this.hit=0,this.miss=0,this.caches=[];for(var r=0;r<this.maxKeyLength;r++)this.caches.push([])}return e.prototype.canBeCached=function(t){return t>0&&t<=this.maxKeyLength},e.prototype.find=function(t,i,r){var s=this.caches[r-1];e:for(var n=0,o=s;n<o.length;n++){for(var a=o[n],l=a.bytes,h=0;h<r;h++)if(l[h]!==t[i+h])continue e;return a.str}return null},e.prototype.store=function(t,i){var r=this.caches[t.length-1],s={bytes:t,str:i};r.length>=this.maxLengthPerKey?r[Math.random()*r.length|0]=s:r.push(s)},e.prototype.decode=function(t,i,r){var s=this.find(t,i,r);if(s!=null)return this.hit++,s;this.miss++;var n=_t(t,i,r),o=Uint8Array.prototype.slice.call(t,i,i+r);return this.store(o,n),n},e}();var ss=function(e,t,i,r){function s(n){return n instanceof i?n:new i(function(o){o(n)})}return new(i||(i=Promise))(function(n,o){function a(c){try{h(r.next(c))}catch(p){o(p)}}function l(c){try{h(r.throw(c))}catch(p){o(p)}}function h(c){c.done?n(c.value):s(c.value).then(a,l)}h((r=r.apply(e,t||[])).next())})},Pt=function(e,t){var i={label:0,sent:function(){if(n[0]&1)throw n[1];return n[1]},trys:[],ops:[]},r,s,n,o;return o={next:a(0),throw:a(1),return:a(2)},typeof Symbol=="function"&&(o[Symbol.iterator]=function(){return this}),o;function a(h){return function(c){return l([h,c])}}function l(h){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,h[0]&&(i=0)),i;)try{if(r=1,s&&(n=h[0]&2?s.return:h[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,h[1])).done)return n;switch(s=0,n&&(h=[h[0]&2,n.value]),h[0]){case 0:case 1:n=h;break;case 4:return i.label++,{value:h[1],done:!1};case 5:i.label++,s=h[1],h=[0];continue;case 7:h=i.ops.pop(),i.trys.pop();continue;default:if(n=i.trys,!(n=n.length>0&&n[n.length-1])&&(h[0]===6||h[0]===2)){i=0;continue}if(h[0]===3&&(!n||h[1]>n[0]&&h[1]<n[3])){i.label=h[1];break}if(h[0]===6&&i.label<n[1]){i.label=n[1],n=h;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(h);break}n[2]&&i.ops.pop(),i.trys.pop();continue}h=t.call(e,i)}catch(c){h=[6,c],s=0}finally{r=n=0}if(h[0]&5)throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}},_i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],i;return t?t.call(e):(e=typeof __values=="function"?__values(e):e[Symbol.iterator](),i={},r("next"),r("throw"),r("return"),i[Symbol.asyncIterator]=function(){return this},i);function r(n){i[n]=e[n]&&function(o){return new Promise(function(a,l){o=e[n](o),s(a,l,o.done,o.value)})}}function s(n,o,a,l){Promise.resolve(l).then(function(h){n({value:h,done:a})},o)}},we=function(e){return this instanceof we?(this.v=e,this):new we(e)},ns=function(e,t,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=i.apply(e,t||[]),s,n=[];return s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s;function o(f){r[f]&&(s[f]=function(m){return new Promise(function(v,b){n.push([f,m,v,b])>1||a(f,m)})})}function a(f,m){try{l(r[f](m))}catch(v){p(n[0][3],v)}}function l(f){f.value instanceof we?Promise.resolve(f.value.v).then(h,c):p(n[0][2],f)}function h(f){a("next",f)}function c(f){a("throw",f)}function p(f,m){f(m),n.shift(),n.length&&a(n[0][0],n[0][1])}},Ri="array",st="map_key",os="map_value",as=function(e){return typeof e=="string"||typeof e=="number"},De=-1,It=new DataView(new ArrayBuffer(0)),ls=new Uint8Array(It.buffer);try{It.getInt8(0)}catch(e){if(!(e instanceof RangeError))throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access")}var nt=RangeError,Pi=new nt("Insufficient data"),hs=new Ci,Dt=function(){function e(t){var i,r,s,n,o,a,l;this.totalPos=0,this.pos=0,this.view=It,this.bytes=ls,this.headByte=De,this.stack=[],this.extensionCodec=(i=t==null?void 0:t.extensionCodec)!==null&&i!==void 0?i:it.defaultCodec,this.context=t==null?void 0:t.context,this.useBigInt64=(r=t==null?void 0:t.useBigInt64)!==null&&r!==void 0?r:!1,this.maxStrLength=(s=t==null?void 0:t.maxStrLength)!==null&&s!==void 0?s:ge,this.maxBinLength=(n=t==null?void 0:t.maxBinLength)!==null&&n!==void 0?n:ge,this.maxArrayLength=(o=t==null?void 0:t.maxArrayLength)!==null&&o!==void 0?o:ge,this.maxMapLength=(a=t==null?void 0:t.maxMapLength)!==null&&a!==void 0?a:ge,this.maxExtLength=(l=t==null?void 0:t.maxExtLength)!==null&&l!==void 0?l:ge,this.keyDecoder=(t==null?void 0:t.keyDecoder)!==void 0?t.keyDecoder:hs}return e.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=De,this.stack.length=0},e.prototype.setBuffer=function(t){this.bytes=ve(t),this.view=Ti(this.bytes),this.pos=0},e.prototype.appendBuffer=function(t){if(this.headByte===De&&!this.hasRemaining(1))this.setBuffer(t);else{var i=this.bytes.subarray(this.pos),r=ve(t),s=new Uint8Array(i.length+r.length);s.set(i),s.set(r,i.length),this.setBuffer(s)}},e.prototype.hasRemaining=function(t){return this.view.byteLength-this.pos>=t},e.prototype.createExtraByteError=function(t){var i=this,r=i.view,s=i.pos;return new RangeError("Extra ".concat(r.byteLength-s," of ").concat(r.byteLength," byte(s) found at buffer[").concat(t,"]"))},e.prototype.decode=function(t){this.reinitializeState(),this.setBuffer(t);var i=this.doDecodeSync();if(this.hasRemaining(1))throw this.createExtraByteError(this.pos);return i},e.prototype.decodeMulti=function(t){return Pt(this,function(i){switch(i.label){case 0:this.reinitializeState(),this.setBuffer(t),i.label=1;case 1:return this.hasRemaining(1)?[4,this.doDecodeSync()]:[3,3];case 2:return i.sent(),[3,1];case 3:return[2]}})},e.prototype.decodeAsync=function(t){var i,r,s,n,o,a,l;return ss(this,void 0,void 0,function(){var h,c,p,f,m,v,b,x;return Pt(this,function(g){switch(g.label){case 0:h=!1,g.label=1;case 1:g.trys.push([1,6,7,12]),i=!0,r=_i(t),g.label=2;case 2:return[4,r.next()];case 3:if(s=g.sent(),n=s.done,!!n)return[3,5];l=s.value,i=!1;try{if(p=l,h)throw this.createExtraByteError(this.totalPos);this.appendBuffer(p);try{c=this.doDecodeSync(),h=!0}catch(w){if(!(w instanceof nt))throw w}this.totalPos+=this.pos}finally{i=!0}g.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return f=g.sent(),o={error:f},[3,12];case 7:return g.trys.push([7,,10,11]),!i&&!n&&(a=r.return)?[4,a.call(r)]:[3,9];case 8:g.sent(),g.label=9;case 9:return[3,11];case 10:if(o)throw o.error;return[7];case 11:return[7];case 12:if(h){if(this.hasRemaining(1))throw this.createExtraByteError(this.totalPos);return[2,c]}throw m=this,v=m.headByte,b=m.pos,x=m.totalPos,new RangeError("Insufficient data in parsing ".concat(rt(v)," at ").concat(x," (").concat(b," in the current buffer)"))}})})},e.prototype.decodeArrayStream=function(t){return this.decodeMultiAsync(t,!0)},e.prototype.decodeStream=function(t){return this.decodeMultiAsync(t,!1)},e.prototype.decodeMultiAsync=function(t,i){return ns(this,arguments,function(){var s,n,o,a,l,h,c,p,f,m,v,b;return Pt(this,function(x){switch(x.label){case 0:s=i,n=-1,x.label=1;case 1:x.trys.push([1,15,16,21]),o=!0,a=_i(t),x.label=2;case 2:return[4,we(a.next())];case 3:if(l=x.sent(),f=l.done,!!f)return[3,14];b=l.value,o=!1,x.label=4;case 4:if(x.trys.push([4,,12,13]),h=b,i&&n===0)throw this.createExtraByteError(this.totalPos);this.appendBuffer(h),s&&(n=this.readArraySize(),s=!1,this.complete()),x.label=5;case 5:x.trys.push([5,10,,11]),x.label=6;case 6:return[4,we(this.doDecodeSync())];case 7:return[4,x.sent()];case 8:return x.sent(),--n==0?[3,9]:[3,6];case 9:return[3,11];case 10:if(c=x.sent(),!(c instanceof nt))throw c;return[3,11];case 11:return this.totalPos+=this.pos,[3,13];case 12:return o=!0,[7];case 13:return[3,2];case 14:return[3,21];case 15:return p=x.sent(),m={error:p},[3,21];case 16:return x.trys.push([16,,19,20]),!o&&!f&&(v=a.return)?[4,we(v.call(a))]:[3,18];case 17:x.sent(),x.label=18;case 18:return[3,20];case 19:if(m)throw m.error;return[7];case 20:return[7];case 21:return[2]}})})},e.prototype.doDecodeSync=function(){e:for(;;){var t=this.readHeadByte(),i=void 0;if(t>=224)i=t-256;else if(t<192)if(t<128)i=t;else if(t<144){var r=t-128;if(r!==0){this.pushMapState(r),this.complete();continue e}else i={}}else if(t<160){var r=t-144;if(r!==0){this.pushArrayState(r),this.complete();continue e}else i=[]}else{var s=t-160;i=this.decodeUtf8String(s,0)}else if(t===192)i=null;else if(t===194)i=!1;else if(t===195)i=!0;else if(t===202)i=this.readF32();else if(t===203)i=this.readF64();else if(t===204)i=this.readU8();else if(t===205)i=this.readU16();else if(t===206)i=this.readU32();else if(t===207)this.useBigInt64?i=this.readU64AsBigInt():i=this.readU64();else if(t===208)i=this.readI8();else if(t===209)i=this.readI16();else if(t===210)i=this.readI32();else if(t===211)this.useBigInt64?i=this.readI64AsBigInt():i=this.readI64();else if(t===217){var s=this.lookU8();i=this.decodeUtf8String(s,1)}else if(t===218){var s=this.lookU16();i=this.decodeUtf8String(s,2)}else if(t===219){var s=this.lookU32();i=this.decodeUtf8String(s,4)}else if(t===220){var r=this.readU16();if(r!==0){this.pushArrayState(r),this.complete();continue e}else i=[]}else if(t===221){var r=this.readU32();if(r!==0){this.pushArrayState(r),this.complete();continue e}else i=[]}else if(t===222){var r=this.readU16();if(r!==0){this.pushMapState(r),this.complete();continue e}else i={}}else if(t===223){var r=this.readU32();if(r!==0){this.pushMapState(r),this.complete();continue e}else i={}}else if(t===196){var r=this.lookU8();i=this.decodeBinary(r,1)}else if(t===197){var r=this.lookU16();i=this.decodeBinary(r,2)}else if(t===198){var r=this.lookU32();i=this.decodeBinary(r,4)}else if(t===212)i=this.decodeExtension(1,0);else if(t===213)i=this.decodeExtension(2,0);else if(t===214)i=this.decodeExtension(4,0);else if(t===215)i=this.decodeExtension(8,0);else if(t===216)i=this.decodeExtension(16,0);else if(t===199){var r=this.lookU8();i=this.decodeExtension(r,1)}else if(t===200){var r=this.lookU16();i=this.decodeExtension(r,2)}else if(t===201){var r=this.lookU32();i=this.decodeExtension(r,4)}else throw new N("Unrecognized type byte: ".concat(rt(t)));this.complete();for(var n=this.stack;n.length>0;){var o=n[n.length-1];if(o.type===Ri)if(o.array[o.position]=i,o.position++,o.position===o.size)n.pop(),i=o.array;else continue e;else if(o.type===st){if(!as(i))throw new N("The type of key must be string or number but "+typeof i);if(i==="__proto__")throw new N("The key __proto__ is not allowed");o.key=i,o.type=os;continue e}else if(o.map[o.key]=i,o.readCount++,o.readCount===o.size)n.pop(),i=o.map;else{o.key=null,o.type=st;continue e}}return i}},e.prototype.readHeadByte=function(){return this.headByte===De&&(this.headByte=this.readU8()),this.headByte},e.prototype.complete=function(){this.headByte=De},e.prototype.readArraySize=function(){var t=this.readHeadByte();switch(t){case 220:return this.readU16();case 221:return this.readU32();default:{if(t<160)return t-144;throw new N("Unrecognized array type byte: ".concat(rt(t)))}}},e.prototype.pushMapState=function(t){if(t>this.maxMapLength)throw new N("Max length exceeded: map length (".concat(t,") > maxMapLengthLength (").concat(this.maxMapLength,")"));this.stack.push({type:st,size:t,key:null,readCount:0,map:{}})},e.prototype.pushArrayState=function(t){if(t>this.maxArrayLength)throw new N("Max length exceeded: array length (".concat(t,") > maxArrayLength (").concat(this.maxArrayLength,")"));this.stack.push({type:Ri,size:t,array:new Array(t),position:0})},e.prototype.decodeUtf8String=function(t,i){var r;if(t>this.maxStrLength)throw new N("Max length exceeded: UTF-8 byte length (".concat(t,") > maxStrLength (").concat(this.maxStrLength,")"));if(this.bytes.byteLength<this.pos+i+t)throw Pi;var s=this.pos+i,n;return this.stateIsMapKey()&&((r=this.keyDecoder)===null||r===void 0?void 0:r.canBeCached(t))?n=this.keyDecoder.decode(this.bytes,s,t):n=Si(this.bytes,s,t),this.pos+=i+t,n},e.prototype.stateIsMapKey=function(){if(this.stack.length>0){var t=this.stack[this.stack.length-1];return t.type===st}return!1},e.prototype.decodeBinary=function(t,i){if(t>this.maxBinLength)throw new N("Max length exceeded: bin length (".concat(t,") > maxBinLength (").concat(this.maxBinLength,")"));if(!this.hasRemaining(t+i))throw Pi;var r=this.pos+i,s=this.bytes.subarray(r,r+t);return this.pos+=i+t,s},e.prototype.decodeExtension=function(t,i){if(t>this.maxExtLength)throw new N("Max length exceeded: ext length (".concat(t,") > maxExtLength (").concat(this.maxExtLength,")"));var r=this.view.getInt8(this.pos+i),s=this.decodeBinary(t,i+1);return this.extensionCodec.decode(s,r,this.context)},e.prototype.lookU8=function(){return this.view.getUint8(this.pos)},e.prototype.lookU16=function(){return this.view.getUint16(this.pos)},e.prototype.lookU32=function(){return this.view.getUint32(this.pos)},e.prototype.readU8=function(){var t=this.view.getUint8(this.pos);return this.pos++,t},e.prototype.readI8=function(){var t=this.view.getInt8(this.pos);return this.pos++,t},e.prototype.readU16=function(){var t=this.view.getUint16(this.pos);return this.pos+=2,t},e.prototype.readI16=function(){var t=this.view.getInt16(this.pos);return this.pos+=2,t},e.prototype.readU32=function(){var t=this.view.getUint32(this.pos);return this.pos+=4,t},e.prototype.readI32=function(){var t=this.view.getInt32(this.pos);return this.pos+=4,t},e.prototype.readU64=function(){var t=Ai(this.view,this.pos);return this.pos+=8,t},e.prototype.readI64=function(){var t=tt(this.view,this.pos);return this.pos+=8,t},e.prototype.readU64AsBigInt=function(){var t=this.view.getBigUint64(this.pos);return this.pos+=8,t},e.prototype.readI64AsBigInt=function(){var t=this.view.getBigInt64(this.pos);return this.pos+=8,t},e.prototype.readF32=function(){var t=this.view.getFloat32(this.pos);return this.pos+=4,t},e.prototype.readF64=function(){var t=this.view.getFloat64(this.pos);return this.pos+=8,t},e}();var Lt={};Ui(Lt,{default:()=>cs});var cs={mounted(){let e=document.querySelector("meta[name='csrf-token']").getAttribute("content"),t=[],i=null,r=g=>{p&&g.interactions.length!==0&&console.log("sending",g)("/test/store_interactions",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-Token":e},body:JSON.stringify(g)})},s=g=>{if(g.id&&!g.id.startsWith("phx-"))return`#${g.id}`;let w=[];for(;!g.id.startsWith("phx-");){let k=g.tagName.toLowerCase(),C=g,$=1;for(;C=C.previousElementSibling;)C.tagName.toLowerCase()===k&&$++;w.unshift(`${k}:nth-of-type(${$})`),g=g.parentNode}return w.join(" > ")},n=g=>{let w=g.parentNode;for(;w.tagName!=="FORM";)w=w.parentNode;return w.id},o=g=>{console.log(g),i&&g.selector!=="#stop-recording"&&pushEventTo(this.el,"record-interaction",g)},a=g=>{let w=g.target,k=s(w);if(k){let C={type:"click",selector:k,timestamp:Date.now()};o(C)}},l=g=>{let w=g.target,k=s(w);if(console.log(g),k){let C={type:"input",selector:k,name:w.name,form:n(w),value:w.value,timestamp:Date.now()};o(C)}},h=g=>{if(p){g.preventDefault();let w=g.target;console.log(w);let k=s(w);if(k){let C={type:"assert_text",selector:k,text:w.textContent.trim(),timestamp:Date.now()};o(C)}}},c=g=>!!g.text?.trim(),p=!1,f="input",m="button, a, input[type='checkbox']",v=g=>{g.querySelectorAll(f).forEach(w=>{w.addEventListener("input",l)}),g.querySelectorAll(m).forEach(w=>{w.addEventListener("click",a)}),g.querySelectorAll("*").forEach(w=>{c(w)&&w.addEventListener("contextmenu",h,!0)})},b=g=>{g.querySelectorAll(f).forEach(w=>{w.removeEventListener("input",l)}),g.querySelectorAll(m).forEach(w=>{w.removeEventListener("click",a)}),g.querySelectorAll("*").forEach(w=>{c(w)&&(console.log(w),console.log(w.removeEventListener("contextmenu",h,!0)))})};window.addEventListener("phx:redirect",g=>{console.log(g)}),window.addEventListener("phx:start-recording",g=>{p=!0,i=g.detail.module+Date.now().toString(),console.log(i),v(document),x.observe(document.body,{childList:!0,subtree:!0}),t=[{type:"path",path:g.detail.path,timestamp:Date.now()}]}),window.addEventListener("phx:stop-recording",()=>{r({name:i,interactions:t}),x.disconnect(),b(document),p=!1});let x=new MutationObserver(g=>{g.forEach(w=>{w.addedNodes.forEach(k=>{k.nodeType===1&&(console.log(k),v(k))})})})}};function ds(e,t){let i={};return Object.keys(e).map(function(r){i[`${t}#${r}`]=e[r]}),i}var us=Object.assign(ds(Lt,"Punkix.Web.Components.InteractionRecorder")),Le=us;var Qs=new Rt({ignoreUndefined:!0}),en=new Dt;var fs=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Ii=new bi("/live",Ht,{hooks:{...Le,...Le},longPollFallbackMs:2500,params:{_csrf_token:fs}});function ps(){for(detail of document.querySelectorAll("details"))detail.addEventListener("toggle",e=>{let t=`details_${detail.id}`;detail.open?localStorage.setItem(t,!0):localStorage.removeItem(t)})}function ms(){for(detail of document.querySelectorAll("details"))detail.id&&localStorage.getItem(`details_${detail.id}`)&&detail.setAttribute("open","")}document.addEventListener("phx:update",ms);document.addEventListener("DOMContentLoaded",ps);Ii.connect();window.liveSocket=Ii;})();
//# sourceMappingURL=data:application/json;base64,
